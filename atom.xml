<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吾爱CODE</title>
  
  <subtitle>一个记录自己进步的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.felixwee.com/"/>
  <updated>2019-02-26T08:51:33.687Z</updated>
  <id>http://www.felixwee.com/</id>
  
  <author>
    <name>魏凤安(felixwee)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android开发-通过包名运行apk</title>
    <link href="http://www.felixwee.com/2019/02/26/android/04_launcherapk/04_launcherapk/"/>
    <id>http://www.felixwee.com/2019/02/26/android/04_launcherapk/04_launcherapk/</id>
    <published>2019-02-26T08:01:00.000Z</published>
    <updated>2019-02-26T08:51:33.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>这个功能实际是用于在Unity中调用android接口，我已经把这个功能封装到了NativePlugin_AndroidInterface库中.</p><p><a href="https://github.com/weifengan/NativePlugin_AndroidInterface" target="_blank" rel="noopener">https://github.com/weifengan/NativePlugin_AndroidInterface</a></p><a id="more"></a><h3 id="实际代码"><a href="#实际代码" class="headerlink" title="实际代码"></a>实际代码</h3><p>在实际过程中使用的是Android的PackageManager来实现.具体代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过APk包名启动apk</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> packageName  包名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startApp</span><span class="params">(String packageName)</span></span>&#123;</span><br><span class="line">    Log.e(<span class="string">"Unity"</span>,<span class="string">"startactivity="</span>+packageName);</span><br><span class="line">    PackageManager packageManager = context.getPackageManager();</span><br><span class="line">    Intent intent=<span class="keyword">new</span> Intent();</span><br><span class="line">    intent =packageManager.getLaunchIntentForPackage(packageName);</span><br><span class="line">    <span class="keyword">if</span>(intent==<span class="keyword">null</span>)&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>.getApplicationContext(), <span class="string">"未安装APK:"</span>+packageName+<span class="string">""</span>, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        context.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了拉起apk的功能外，仓库中还有一些其它方法，例如，获取程序列表，调用系统卸载apk等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;这个功能实际是用于在Unity中调用android接口，我已经把这个功能封装到了NativePlugin_AndroidInterface库中.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/weifengan/NativePlugin_AndroidInterface&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/weifengan/NativePlugin_AndroidInterface&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.felixwee.com/categories/Android/"/>
    
    
      <category term="Android开发" scheme="http://www.felixwee.com/tags/Android%E5%BC%80%E5%8F%91/"/>
    
      <category term="android" scheme="http://www.felixwee.com/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Unity借助AAR实现与Android的交互</title>
    <link href="http://www.felixwee.com/2019/01/07/android/03_unity_call_aar/unity_call_aar/"/>
    <id>http://www.felixwee.com/2019/01/07/android/03_unity_call_aar/unity_call_aar/</id>
    <published>2019-01-07T08:01:00.000Z</published>
    <updated>2019-01-08T07:31:09.114Z</updated>
    
    <content type="html"><![CDATA[<p>对于Unity与Andorid之间的交互，觉得是比较重要的，很早之前写了一篇基于Eclipse生成jar包与Unity交互的文章，但android Studio的功能比较强大，刚开始搞得是一头雾水，不知道工程怎么处理，也就没使用Android Studio编译arr包来与unity交互，今天终于弄明白了，也把这过程记录下，分享给大家，让大家少走点弯路。</p><a id="more"></a><h2 id="一、开发工具"><a href="#一、开发工具" class="headerlink" title="一、开发工具"></a>一、开发工具</h2><ul><li>Android Studio 3.2</li><li>Unity 2017.3.1f1</li></ul><h2 id="二、Android-Studio创建AAR"><a href="#二、Android-Studio创建AAR" class="headerlink" title="二、Android Studio创建AAR"></a>二、Android Studio创建AAR</h2><h3 id="1-新建Android工程，所有参数默认即可。"><a href="#1-新建Android工程，所有参数默认即可。" class="headerlink" title="1.新建Android工程，所有参数默认即可。"></a>1.新建Android工程，所有参数默认即可。</h3><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190107172347.jpg" alt=""></p><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190107172532.jpg" alt=""></p><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190107172611.jpg" alt=""></p><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190107172633.jpg" alt=""></p><p> 点击Finish按钮，等待项目初始化完成。</p><h3 id="2-创建Moudle"><a href="#2-创建Moudle" class="headerlink" title="2.创建Moudle"></a>2.创建Moudle</h3><p>  在AndroidStudio中，我们创建一个Moudle专门用来与Unity进行通讯。将项目的视图切换到Projects。</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108101631.jpg" alt="">  </p><p>  将项目的视图切换到Projects后，在MyApplication上右键，选择新建Module</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108101753.jpg" alt=""></p><p>  这里，我们需要选择的项是Anroid Libarary，然后点击下一步</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108101830.jpg" alt=""></p><p>  然后将Application/Libarary name输入框中输入 AndroidNativePlugin，同时packageName也会随着输入变化,确认没有问题，点击Finish按钮完成创建。</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108103900.jpg" alt=""></p><p>  实际上我们创建的Module可以理解为MyApplication的一个功能模块，创建好后文件如下:</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108104338.jpg" alt=""></p><h3 id="3-导入Unity的classes-jar到AndroidStudio"><a href="#3-导入Unity的classes-jar到AndroidStudio" class="headerlink" title="3.导入Unity的classes.jar到AndroidStudio"></a>3.导入Unity的classes.jar到AndroidStudio</h3><p> Unity的库文件classes.jar需要到Unity安装目录中找，一般有两种方式,在Player Settings里Configuration-&gt;Scripting Backend 找到</p><ul><li>Mono</li><li>IL2CPP</li></ul><p>根据Unity发布设置进行选择导入,我们这次使用的是Mono方式。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mono</span></span><br><span class="line">Unity安装目录\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Release\Classes</span><br><span class="line"></span><br><span class="line"><span class="comment">//IL2CPP</span></span><br><span class="line">Unity安装目录\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\il2cpp\Release\Classes</span><br></pre></td></tr></table></figure></p><p> 找到classes.jar文件后，右键复制。然后粘贴到AndroidStudio中,在上一步新建的androidnavtiveplugin的结构中发现有一个libs文件夹，我们直播在libs目录上右键，选择paste，弹窗点击 ok。</p><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108110125.jpg" alt=""></p><p> 到这里并没有真正导入，我们只是把文件导入到工程时，是没有办法使用库里面的内容。接着，我们在classes.jar上右键，选择【Add As Libarary】,弹出窗点击【OK】</p><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108111948.jpg" alt=""></p><p> <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108112634.jpg" alt=""></p><p>  添加正确后，classes.jar前面会有箭头，可以展开查看库里内容，说明已经添加成功了。</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108112730.jpg" alt=""></p><h3 id="4-编写Android逻辑代码"><a href="#4-编写Android逻辑代码" class="headerlink" title="4.编写Android逻辑代码"></a>4.编写Android逻辑代码</h3><p>  找到Module的src目录里的包com.felixwee.androidnativeplugin，右键，选择New-&gt;Java Class.</p><p>  <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108112934.jpg" alt=""></p><p>  填写类信息,Name可以自己起名字，我这里起名MainActivity，点击确定.</p><p>   <img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108113246.jpg" alt=""></p><p>  接下来，我们可以在MainActivity.java里写功能代码了,我们简单的添几个方法，用于演示Unity与Android之间的调用。代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.felixwee.androidnativeplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayer;</span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayerActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">UnityPlayerActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示Android Toast</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">ShowToast</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,str,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旋转Cube对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RotateCube</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用CubeController对象上所挂脚本的RotateCube,参数为0.5</span></span><br><span class="line">        UnityPlayer.UnitySendMessage(<span class="string">"CubeController"</span>,<span class="string">"Rotate"</span>,<span class="string">"0.5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-修改AndroidManifest文件"><a href="#5-修改AndroidManifest文件" class="headerlink" title="5.修改AndroidManifest文件"></a>5.修改AndroidManifest文件</h3><p>打开androidnativeplugin下的AndroidManifest.xml文件，我们发现这里面配置除了一个包名，没有其它内容了，这是不行的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.felixwee.androidnativeplugin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要动刀做大手术来修改它，我们找到app里的AndroidManifest.xml文件.</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108115151.jpg" alt=""></p><p>里面的内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.felixwee.myapplication"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们复制一下application标签，然后粘贴到androidnativeplugin模块的AndroidManifest.xml里，并做下修改，修改后内容如下:</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108121800.jpg" alt=""></p><p>文本格式代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.felixwee.androidnativeplugin"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/app_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.NoTitleBar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"unityplayer.UnityActivity"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-生成AAR文件"><a href="#6-生成AAR文件" class="headerlink" title="6.生成AAR文件"></a>6.生成AAR文件</h3><p>在左侧窗口中选中androidnativeplugin模块，点击工具栏的小锤子图标进行编译，如果没有出问题，一般都会编译成功。</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108122204.jpg" alt=""></p><p>编译完成后，我们找到生成的arr文件。</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108122308.jpg" alt=""></p><h3 id="7-删除AAR包中的classes-jar"><a href="#7-删除AAR包中的classes-jar" class="headerlink" title="7.删除AAR包中的classes.jar"></a>7.删除AAR包中的classes.jar</h3><p>在这里，因为在Unity中，他会自己加载我们之前复制到lib目录下的classes.jar包，所以在放到Unity工程之前还需要删除我们放在libs的classes.jar。<br>使用压缩软件，打开outputs里的arr文件androidnativeplugin-debug.arr，会看到包里面的内容:</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108131858.jpg" alt=""></p><p>进入libs把里面的classes.jar删除掉。</p><p>到这里，AndroidStudio端的操作就算都搞定了，接下来，我们来搞一下Unity端。</p><h2 id="三、Unity工程"><a href="#三、Unity工程" class="headerlink" title="三、Unity工程"></a>三、Unity工程</h2><h3 id="1-创建Unity新工程"><a href="#1-创建Unity新工程" class="headerlink" title="1.创建Unity新工程"></a>1.创建Unity新工程</h3><p>新建Unity工程，切换到Android平台,创建UI,再UI上新建一个Button,按钮文字修改Show Toast，用来调用Android里的ShowToast函数。<br>同时新建一个Cube对象，调整好位置和大小，效果如下:</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108134012.jpg" alt=""></p><h3 id="2-编写控制脚本"><a href="#2-编写控制脚本" class="headerlink" title="2.编写控制脚本"></a>2.编写控制脚本</h3><p>在Cube对象上新建C#代码 CubeController.cs,并把按钮拖拽到btn变量上,代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CubeController</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   @desction:</span></span><br><span class="line"><span class="comment">   @author:felixwee</span></span><br><span class="line"><span class="comment">   @email:felixwee@163.com</span></span><br><span class="line"><span class="comment">   @website:www.felixwee.com</span></span><br><span class="line"><span class="comment">   @github:http://www.github.com/weifengan</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***************************************/</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CubeController</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把场景</span></span><br><span class="line">    <span class="keyword">public</span> Button btnCallAndroid;</span><br><span class="line"><span class="comment">// Use this for initialization</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        btnCallAndroid.onClick.AddListener(<span class="keyword">delegate</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">"com.unity3d.player.UnityPlayer"</span>);</span><br><span class="line">            AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">"currentActivity"</span>);</span><br><span class="line">            <span class="comment">//调用Android里的RotateCube函数，此函数在Android中调用了CubeController和人里的Rotate函数</span></span><br><span class="line">            jo.Call(<span class="string">"ShowToast"</span>,<span class="string">"Unity调用了ShowToast显示的消息"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">"com.unity3d.player.UnityPlayer"</span>);</span><br><span class="line">        AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">"currentActivity"</span>);</span><br><span class="line">        <span class="comment">//调用Android里的RotateCube函数，此函数在Android中调用了CubeController和人里的Rotate函数</span></span><br><span class="line">        jo.Call(<span class="string">"RotateCube"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rotate</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transform.Rotate(Vector3.up * <span class="keyword">float</span>.Parse(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-导入AAR与AndroidManifest-xml"><a href="#3-导入AAR与AndroidManifest-xml" class="headerlink" title="3.导入AAR与AndroidManifest.xml"></a>3.导入AAR与AndroidManifest.xml</h3><p>在UnityAsset目录，新建文件夹Plugins,在里面创建Android文件夹，然后把AndroidStudio里 Module的AndroidManifest.xml文件和刚刚修改过的aar包，复制到Android文件。</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108135504.jpg" alt=""></p><h3 id="4-发布测试"><a href="#4-发布测试" class="headerlink" title="4.发布测试"></a>4.发布测试</h3><p>将场景添加到Build Settings里，并修改Identification中的packageName，包名可以随便起，只要不和创建的AS里使用的包名一样就行，然后导出测试即可。</p><p><img src="/2019/01/07/android/03_unity_call_aar/unity_call_aar/20190108144919.jpg" alt=""></p><h2 id="四、源码下载"><a href="#四、源码下载" class="headerlink" title="四、源码下载"></a>四、源码下载</h2><p>源码下载  <a href="https://github.com/weifengan/AndroidAndUnityInteraction.git" target="_blank" rel="noopener">https://github.com/weifengan/AndroidAndUnityInteraction.git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Unity与Andorid之间的交互，觉得是比较重要的，很早之前写了一篇基于Eclipse生成jar包与Unity交互的文章，但android Studio的功能比较强大，刚开始搞得是一头雾水，不知道工程怎么处理，也就没使用Android Studio编译arr包来与unity交互，今天终于弄明白了，也把这过程记录下，分享给大家，让大家少走点弯路。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://www.felixwee.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="Android" scheme="http://www.felixwee.com/tags/Android/"/>
    
      <category term="AAR" scheme="http://www.felixwee.com/tags/AAR/"/>
    
      <category term="Unity与Android交互" scheme="http://www.felixwee.com/tags/Unity%E4%B8%8EAndroid%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>Unity借助AAR实现与Android的交互</title>
    <link href="http://www.felixwee.com/2019/01/07/unity/unity_call_aar/unity_call_aar/"/>
    <id>http://www.felixwee.com/2019/01/07/unity/unity_call_aar/unity_call_aar/</id>
    <published>2019-01-07T08:01:00.000Z</published>
    <updated>2019-01-08T07:19:33.848Z</updated>
    
    <content type="html"><![CDATA[<p>对于Unity与Andorid之间的交互，觉得是比较重要的，很早之前写了一篇基于Eclipse生成jar包与Unity交互的文章，但android Studio的功能比较强大，刚开始搞得是一头雾水，不知道工程怎么处理，也就没使用Android Studio编译arr包来与unity交互，今天终于弄明白了，也把这过程记录下，分享给大家，让大家少走点弯路。</p><a id="more"></a><h2 id="一、开发工具"><a href="#一、开发工具" class="headerlink" title="一、开发工具"></a>一、开发工具</h2><ul><li>Android Studio 3.2</li><li>Unity 2017.3.1f1</li></ul><h2 id="二、Android-Studio创建AAR"><a href="#二、Android-Studio创建AAR" class="headerlink" title="二、Android Studio创建AAR"></a>二、Android Studio创建AAR</h2><h3 id="1-新建Android工程，所有参数默认即可。"><a href="#1-新建Android工程，所有参数默认即可。" class="headerlink" title="1.新建Android工程，所有参数默认即可。"></a>1.新建Android工程，所有参数默认即可。</h3><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190107172347.jpg" alt=""></p><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190107172532.jpg" alt=""></p><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190107172611.jpg" alt=""></p><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190107172633.jpg" alt=""></p><p> 点击Finish按钮，等待项目初始化完成。</p><h3 id="2-创建Moudle"><a href="#2-创建Moudle" class="headerlink" title="2.创建Moudle"></a>2.创建Moudle</h3><p>  在AndroidStudio中，我们创建一个Moudle专门用来与Unity进行通讯。将项目的视图切换到Projects。</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108101631.jpg" alt="">  </p><p>  将项目的视图切换到Projects后，在MyApplication上右键，选择新建Module</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108101753.jpg" alt=""></p><p>  这里，我们需要选择的项是Anroid Libarary，然后点击下一步</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108101830.jpg" alt=""></p><p>  然后将Application/Libarary name输入框中输入 AndroidNativePlugin，同时packageName也会随着输入变化,确认没有问题，点击Finish按钮完成创建。</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108103900.jpg" alt=""></p><p>  实际上我们创建的Module可以理解为MyApplication的一个功能模块，创建好后文件如下:</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108104338.jpg" alt=""></p><h3 id="3-导入Unity的classes-jar到AndroidStudio"><a href="#3-导入Unity的classes-jar到AndroidStudio" class="headerlink" title="3.导入Unity的classes.jar到AndroidStudio"></a>3.导入Unity的classes.jar到AndroidStudio</h3><p> Unity的库文件classes.jar需要到Unity安装目录中找，一般有两种方式,在Player Settings里Configuration-&gt;Scripting Backend 找到</p><ul><li>Mono</li><li>IL2CPP</li></ul><p>根据Unity发布设置进行选择导入,我们这次使用的是Mono方式。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mono</span></span><br><span class="line">Unity安装目录\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Release\Classes</span><br><span class="line"></span><br><span class="line"><span class="comment">//IL2CPP</span></span><br><span class="line">Unity安装目录\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\il2cpp\Release\Classes</span><br></pre></td></tr></table></figure></p><p> 找到classes.jar文件后，右键复制。然后粘贴到AndroidStudio中,在上一步新建的androidnavtiveplugin的结构中发现有一个libs文件夹，我们直播在libs目录上右键，选择paste，弹窗点击 ok。</p><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108110125.jpg" alt=""></p><p> 到这里并没有真正导入，我们只是把文件导入到工程时，是没有办法使用库里面的内容。接着，我们在classes.jar上右键，选择【Add As Libarary】,弹出窗点击【OK】</p><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108111948.jpg" alt=""></p><p> <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108112634.jpg" alt=""></p><p>  添加正确后，classes.jar前面会有箭头，可以展开查看库里内容，说明已经添加成功了。</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108112730.jpg" alt=""></p><h3 id="4-编写Android逻辑代码"><a href="#4-编写Android逻辑代码" class="headerlink" title="4.编写Android逻辑代码"></a>4.编写Android逻辑代码</h3><p>  找到Module的src目录里的包com.felixwee.androidnativeplugin，右键，选择New-&gt;Java Class.</p><p>  <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108112934.jpg" alt=""></p><p>  填写类信息,Name可以自己起名字，我这里起名MainActivity，点击确定.</p><p>   <img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108113246.jpg" alt=""></p><p>  接下来，我们可以在MainActivity.java里写功能代码了,我们简单的添几个方法，用于演示Unity与Android之间的调用。代码如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.felixwee.androidnativeplugin;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayer;</span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayerActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">UnityPlayerActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 显示Android Toast</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">ShowToast</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">        Toast.makeText(<span class="keyword">this</span>,str,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 旋转Cube对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RotateCube</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//调用CubeController对象上所挂脚本的RotateCube,参数为0.5</span></span><br><span class="line">        UnityPlayer.UnitySendMessage(<span class="string">"CubeController"</span>,<span class="string">"Rotate"</span>,<span class="string">"0.5"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-修改AndroidManifest文件"><a href="#5-修改AndroidManifest文件" class="headerlink" title="5.修改AndroidManifest文件"></a>5.修改AndroidManifest文件</h3><p>打开androidnativeplugin下的AndroidManifest.xml文件，我们发现这里面配置除了一个包名，没有其它内容了，这是不行的。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.felixwee.androidnativeplugin"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>我们需要动刀做大手术来修改它，我们找到app里的AndroidManifest.xml文件.</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108115151.jpg" alt=""></p><p>里面的内容如下:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.felixwee.myapplication"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们复制一下application标签，然后粘贴到androidnativeplugin模块的AndroidManifest.xml里，并做下修改，修改后内容如下:</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108121800.jpg" alt=""></p><p>文本格式代码:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.felixwee.androidnativeplugin"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@drawable/app_icon"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.NoTitleBar"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">meta-data</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:name</span>=<span class="string">"unityplayer.UnityActivity"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-生成AAR文件"><a href="#6-生成AAR文件" class="headerlink" title="6.生成AAR文件"></a>6.生成AAR文件</h3><p>在左侧窗口中选中androidnativeplugin模块，点击工具栏的小锤子图标进行编译，如果没有出问题，一般都会编译成功。</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108122204.jpg" alt=""></p><p>编译完成后，我们找到生成的arr文件。</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108122308.jpg" alt=""></p><h3 id="7-删除AAR包中的classes-jar"><a href="#7-删除AAR包中的classes-jar" class="headerlink" title="7.删除AAR包中的classes.jar"></a>7.删除AAR包中的classes.jar</h3><p>在这里，因为在Unity中，他会自己加载我们之前复制到lib目录下的classes.jar包，所以在放到Unity工程之前还需要删除我们放在libs的classes.jar。<br>使用压缩软件，打开outputs里的arr文件androidnativeplugin-debug.arr，会看到包里面的内容:</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108131858.jpg" alt=""></p><p>进入libs把里面的classes.jar删除掉。</p><p>到这里，AndroidStudio端的操作就算都搞定了，接下来，我们来搞一下Unity端。</p><h2 id="三、Unity工程"><a href="#三、Unity工程" class="headerlink" title="三、Unity工程"></a>三、Unity工程</h2><h3 id="1-创建Unity新工程"><a href="#1-创建Unity新工程" class="headerlink" title="1.创建Unity新工程"></a>1.创建Unity新工程</h3><p>新建Unity工程，切换到Android平台,创建UI,再UI上新建一个Button,按钮文字修改Show Toast，用来调用Android里的ShowToast函数。<br>同时新建一个Cube对象，调整好位置和大小，效果如下:</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108134012.jpg" alt=""></p><h3 id="2-编写控制脚本"><a href="#2-编写控制脚本" class="headerlink" title="2.编写控制脚本"></a>2.编写控制脚本</h3><p>在Cube对象上新建C#代码 CubeController.cs,并把按钮拖拽到btn变量上,代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*************************************</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">CubeController</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   @desction:</span></span><br><span class="line"><span class="comment">   @author:felixwee</span></span><br><span class="line"><span class="comment">   @email:felixwee@163.com</span></span><br><span class="line"><span class="comment">   @website:www.felixwee.com</span></span><br><span class="line"><span class="comment">   @github:http://www.github.com/weifengan</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">***************************************/</span></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.UI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CubeController</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把场景</span></span><br><span class="line">    <span class="keyword">public</span> Button btnCallAndroid;</span><br><span class="line"><span class="comment">// Use this for initialization</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        btnCallAndroid.onClick.AddListener(<span class="keyword">delegate</span> ()</span><br><span class="line">        &#123;</span><br><span class="line">            AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">"com.unity3d.player.UnityPlayer"</span>);</span><br><span class="line">            AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">"currentActivity"</span>);</span><br><span class="line">            <span class="comment">//调用Android里的RotateCube函数，此函数在Android中调用了CubeController和人里的Rotate函数</span></span><br><span class="line">            jo.Call(<span class="string">"ShowToast"</span>,<span class="string">"Unity调用了ShowToast显示的消息"</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">"com.unity3d.player.UnityPlayer"</span>);</span><br><span class="line">        AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">"currentActivity"</span>);</span><br><span class="line">        <span class="comment">//调用Android里的RotateCube函数，此函数在Android中调用了CubeController和人里的Rotate函数</span></span><br><span class="line">        jo.Call(<span class="string">"RotateCube"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Rotate</span>(<span class="params"><span class="keyword">string</span> <span class="keyword">value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transform.Rotate(Vector3.up * <span class="keyword">float</span>.Parse(<span class="keyword">value</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-导入AAR与AndroidManifest-xml"><a href="#3-导入AAR与AndroidManifest-xml" class="headerlink" title="3.导入AAR与AndroidManifest.xml"></a>3.导入AAR与AndroidManifest.xml</h3><p>在UnityAsset目录，新建文件夹Plugins,在里面创建Android文件夹，然后把AndroidStudio里 Module的AndroidManifest.xml文件和刚刚修改过的aar包，复制到Android文件。</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108135504.jpg" alt=""></p><h3 id="4-发布测试"><a href="#4-发布测试" class="headerlink" title="4.发布测试"></a>4.发布测试</h3><p>将场景添加到Build Settings里，并修改Identification中的packageName，包名可以随便起，只要不和创建的AS里使用的包名一样就行，然后导出测试即可。</p><p><img src="/2019/01/07/unity/unity_call_aar/unity_call_aar/20190108144919.jpg" alt=""></p><h2 id="四、源码下载"><a href="#四、源码下载" class="headerlink" title="四、源码下载"></a>四、源码下载</h2><p>源码下载  <a href="https://github.com/weifengan/AndroidAndUnityInteraction.git" target="_blank" rel="noopener">https://github.com/weifengan/AndroidAndUnityInteraction.git</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于Unity与Andorid之间的交互，觉得是比较重要的，很早之前写了一篇基于Eclipse生成jar包与Unity交互的文章，但android Studio的功能比较强大，刚开始搞得是一头雾水，不知道工程怎么处理，也就没使用Android Studio编译arr包来与unity交互，今天终于弄明白了，也把这过程记录下，分享给大家，让大家少走点弯路。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity" scheme="http://www.felixwee.com/categories/Unity/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="Android" scheme="http://www.felixwee.com/tags/Android/"/>
    
      <category term="AAR" scheme="http://www.felixwee.com/tags/AAR/"/>
    
      <category term="Unity与Android交互" scheme="http://www.felixwee.com/tags/Unity%E4%B8%8EAndroid%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
  <entry>
    <title>Android ADB常用指令备忘录</title>
    <link href="http://www.felixwee.com/2018/12/29/android/02_adb_basic/adb_basic/"/>
    <id>http://www.felixwee.com/2018/12/29/android/02_adb_basic/adb_basic/</id>
    <published>2018-12-29T14:01:00.000Z</published>
    <updated>2018-12-29T09:22:08.678Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载ADB工具包"><a href="#下载ADB工具包" class="headerlink" title="下载ADB工具包"></a>下载ADB工具包</h2><ul><li>可以从网上下载Andorid ADB 工具</li><li>如果已经安装过AndroidSDK,可以直接使用platform-tools 文件夹中找到</li><li>点击<a href="./android_adb_platform-tools.zip">这里</a>下载我自己打包好的adb工具</li></ul><a id="more"></a><h2 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h2><p>如果没有配置的话，在命令窗口中是不能使用的，接下来一起配置一下，整个配置也非常简单。<br>在【我的电脑】上右击，选择属性，然后在【高级设置】底部位置有一个【环境变量】按钮。<br>找到系统变量里的path变量双击。在弹出的窗口中新建变量(我的是win10，其它的版本差不多)，变里的地即ADB工具所有文件夹。</p><p><img src="/2018/12/29/android/02_adb_basic/adb_basic/20181229162825.jpg" alt=""></p><p>添加好后，点击窗口的确定，即完成环境变量配置，然后新打开一个cmd,在cmd中输入adb,能看到一大堆代码就算搞定环境了。</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>1.查看已经连接的设备列表</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>2.连接设备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">adb connect <span class="number">192.168</span><span class="number">.10</span><span class="number">.51</span></span><br><span class="line"></span><br><span class="line">---提示结果--</span><br><span class="line">connected to <span class="number">192.168</span><span class="number">.10</span><span class="number">.51</span>:<span class="number">5555</span></span><br></pre></td></tr></table></figure><p>连接的前提是android设备已经打开的USB调试，且支持远程调试才可以</p><p>3.安装应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb install -r E:\FelixWeeWorkFolder\Release\Test.apk</span><br></pre></td></tr></table></figure><p>-r 的意思是如果有同包名的apk则自动覆盖原来的apk</p><p>4.发送文件或文件夹到android设备</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将a.txt文件发送到android设备的存储卡上Test文件夹，最好的提前创建好文件夹</span></span><br><span class="line">adb push E:\FelixWeeWorkFolder\a.txt   sdcard/Test/</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以直接传文件夹</span></span><br><span class="line">adb push E:\FelixWeeWorkFolder  sdcard/</span><br></pre></td></tr></table></figure><p>5.从Android设备下载文件或文件夹</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将a.txt下载到 E:/FelixWeeWorkFolder文件夹</span></span><br><span class="line">adb pull sdcard/test/a.txt  E:/FelixWeeWorkFolder/</span><br><span class="line"></span><br><span class="line"><span class="comment">//将android 设备上的test文件下载到 E:/FelixWeeWorkFolder文件夹</span></span><br><span class="line">adb pull sdcard/test      E:/FelixWeeWorkFolder</span><br></pre></td></tr></table></figure><p>6.输出日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb logcat</span><br></pre></td></tr></table></figure><p>7.开启或关闭adb服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb start-server</span><br><span class="line">adb kill-start</span><br></pre></td></tr></table></figure><p>这些是比较常常用到的，还有一些adb shell操作，大家可以网上搜索一下。<br>今天就写这么多吧，晚上还要</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;下载ADB工具包&quot;&gt;&lt;a href=&quot;#下载ADB工具包&quot; class=&quot;headerlink&quot; title=&quot;下载ADB工具包&quot;&gt;&lt;/a&gt;下载ADB工具包&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;可以从网上下载Andorid ADB 工具&lt;/li&gt;
&lt;li&gt;如果已经安装过AndroidSDK,可以直接使用platform-tools 文件夹中找到&lt;/li&gt;
&lt;li&gt;点击&lt;a href=&quot;./android_adb_platform-tools.zip&quot;&gt;这里&lt;/a&gt;下载我自己打包好的adb工具&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.felixwee.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.felixwee.com/tags/Android/"/>
    
      <category term="ADB" scheme="http://www.felixwee.com/tags/ADB/"/>
    
  </entry>
  
  <entry>
    <title>如何借助Unity引擎使3D视频在Pico G2一体机上播放出影院般的3D效果</title>
    <link href="http://www.felixwee.com/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/"/>
    <id>http://www.felixwee.com/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/</id>
    <published>2018-12-29T04:31:00.000Z</published>
    <updated>2019-02-22T09:43:10.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先我们需要准备好Pico的SDK，大家可以从官网上下载,我使用的是v2.7.6版本。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://dev.picovr.com/sdk</span><br></pre></td></tr></table></figure></p><p>另外，还需一款播放视频的插件,我使用的是EasyMovieTexture，同时还需要找一个3D格式的视频才行，这里我从网上下载了一个比较有代表性的视频，左右眼格式的，出屏效果还是很不错的，截图如下：</p><p><img src="/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102142220.jpg" alt=""></p><p>因为视频文件和插件比较大，所以通过百度云盘分享给大家</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">3D视频:</span><br><span class="line">链接: https://pan.baidu.com/s/1tYziHu8BckWo_G9gaRwRFg 提取码: 89jr</span><br><span class="line"></span><br><span class="line">插件:</span><br><span class="line">链接: https://pan.baidu.com/s/1a7EDa9FCl3OHgvI9ob_WxQ 提取码: syxn</span><br></pre></td></tr></table></figure><p>如果链接失效请发邮件给我:weifengan@163.com</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>1.创建一个3D类型工程，然后切换到Android平台，导入下载好的pico sdk，EasyMovieTexture。然后把视频文件复制到StreamingAssets目录里。</p><p>2.我们直接使用自带的例子来制作，找到PicoMobileSDK/Pvr_Controller/Scenes/Pvr_Controller_UI场景，打开场景后，可以看到场景中有三个对象，我们把Pvr_UnitySDk拖动到Asset窗口作为预设体，这个预设体用来同步头盔和手柄。</p><p>3.创建一个新场景，删除掉原来的Main Camera,把前面制作的预设体Pvr_UnitySDK拖动到场景中,同时创建两个Quad用来显示视频，删除 MeshCollider,分别命名为left,right,并调整到合适大小,我为了演示绽放(2,1,1)，位置调整为(0,0,4)</p><p>4.创建一个空对象Player,添加组件MediaPlayerCtrl组件,Hierarchy结构如下:</p><p>  <img src="/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102145755.jpg" alt=""></p><p>  MediaPlayerCtrl组件参数设置如下:</p><p>  <img src="/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102150210.jpg" alt=""></p><ul><li>str File Name 为要播放视频文件（支持网络地址)</li><li>Target Material 用来显示视频的材质球</li></ul><p>5.为了能够控制视频播放，我们新建Canvas并，添加两个按钮，分别用来控制播放和暂停,这里需要注意的是</p><ul><li>Canvas的Render Mode 必须调整为World Space</li><li>同时EventCamera需要指定为 Pvr_UnitySDK预设里Head上的Camera才行，这个是必须的，</li><li><p>想要手柄可以与UI交互，还要在Canvs上添加Pvr_UICanvas组件。</p><p>将按钮和画面调整到合适大小和位置:效果如下:</p><p> <img src="/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102151733.jpg" alt=""></p></li></ul><p>6.现在虽然可以播放，但不具有3D效果，3D效果的实现简单来说是由两个眼看到的画面有位移差产生的，这也就是为什么需要创建两个Quad来显示视频画面，接下来，我们需要对视频画面进行处理，让他能够实现左右眼看到不同的视频画面。</p><p>前面的视频截图，我们看到，视频实际是由左右两部分组件，我们需要把左边的画面，让左眼看到，右部分画面，让右眼看到，这样才行。</p><p>在这里，我们创建两个材质球，分别命名为left,right，分别赋值给前面创建的两个Quad,并将Shader更换为Unlit/Texture，分别对其参数进行调整。</p><p>左眼</p><p><img src="/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102152810.jpg" alt=""></p><p>右眼</p><p><img src="/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102153003.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;首先我们需要准备好Pico的SDK，大家可以从官网上下载,我使用的是v2.7.6版本。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;http://dev.picovr.com/sdk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;另外，还需一款播放视频的插件,我使用的是EasyMovieTexture，同时还需要找一个3D格式的视频才行，这里我从网上下载了一个比较有代表性的视频，左右眼格式的，出屏效果还是很不错的，截图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/12/29/vr/pico_g2_play_3dlr_format_video/pico_g2_play_3dlr_format_video/20190102142220.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;因为视频文件和插件比较大，所以通过百度云盘分享给大家&lt;/p&gt;
    
    </summary>
    
      <category term="VR" scheme="http://www.felixwee.com/categories/VR/"/>
    
    
      <category term="VR一体机" scheme="http://www.felixwee.com/tags/VR%E4%B8%80%E4%BD%93%E6%9C%BA/"/>
    
      <category term="Pico" scheme="http://www.felixwee.com/tags/Pico/"/>
    
      <category term="G2" scheme="http://www.felixwee.com/tags/G2/"/>
    
      <category term="播放3D格式视频" scheme="http://www.felixwee.com/tags/%E6%92%AD%E6%94%BE3D%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js开发环境搭建</title>
    <link href="http://www.felixwee.com/2018/06/24/vue/1_vue_env_install/vue_env_install/"/>
    <id>http://www.felixwee.com/2018/06/24/vue/1_vue_env_install/vue_env_install/</id>
    <published>2018-06-23T16:00:00.000Z</published>
    <updated>2018-12-28T22:46:32.520Z</updated>
    
    <content type="html"><![CDATA[<p>最近这段时间，准备学习一门web前端技术，在angulerJs和vue之间选择有些犹豫知学哪个容易，最后通过论坛网友的建议，决定以vue来入手，今天把vue.js运行环境搭建好了，在此作一个备忘，也希望能给准备学习vue同学一个参考。</p><h2 id="Node环境安装"><a href="#Node环境安装" class="headerlink" title="Node环境安装"></a>Node环境安装</h2><p>如果没有安装nodejs,请前往<a href="http://nodejs.cn/download/" target="_blank" rel="noopener">http://nodejs.cn/download/</a> 进行下载，下载后运行，直接安装，根据提示完成安装。</p><p>安装完成后，可以通过Win+R打开系统运行窗口，输入cmd,并在输入指令<br><a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure></p><p>查看node.js版本，看到输出即为成功.</p><p><img src="/2018/06/24/vue/1_vue_env_install/vue_env_install/20180624215330.jpg" alt=""></p><h2 id="安装全局vue-cli脚手架-用于帮助搭建所需的模板框架"><a href="#安装全局vue-cli脚手架-用于帮助搭建所需的模板框架" class="headerlink" title="安装全局vue-cli脚手架,用于帮助搭建所需的模板框架"></a>安装全局vue-cli脚手架,用于帮助搭建所需的模板框架</h2><p>同样是打开命令行cmd,输入以下命令:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install -g vue-cli</span><br></pre></td></tr></table></figure><p>安装完成后，输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue</span><br></pre></td></tr></table></figure><p>能看到类似的输出，即为安装成功.</p><p><img src="/2018/06/24/vue/1_vue_env_install/vue_env_install/20180624220828.jpg" alt=""></p><h2 id="创建Vue项目"><a href="#创建Vue项目" class="headerlink" title="创建Vue项目"></a>创建Vue项目</h2><p>当上面的安装完成后，使用下面的命令创建一个项目,该命令行会从网上下载vue项目结构模板.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack vue_test</span><br></pre></td></tr></table></figure><p>其中:vue_test为项目文件夹名，可以替换。</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><p>完成上一步操作后，需要安装项目需要进入项目文件夹vue_test内，安装相关依赖.<br>指令如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd vue_test (回车)</span><br><span class="line">npm install (回车)</span><br></pre></td></tr></table></figure><p>等这些操作完成后，目录文件结构构大概如下:</p><p><img src="/2018/06/24/vue/1_vue_env_install/vue_env_install/20180624221426.jpg" alt=""></p><h2 id="测试开发环境"><a href="#测试开发环境" class="headerlink" title="测试开发环境"></a>测试开发环境</h2><p>所有软件安装结束后，执行下面的指令，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>并在浏览器地址栏输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8080/</span><br></pre></td></tr></table></figure></p><p>当网页里呈现如下网页，即为环境安装成功</p><p><img src="/2018/06/24/vue/1_vue_env_install/vue_env_install/20180624215331.png" alt=""></p><p>好的，到这里就全部结束了，可以进行vue开发了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近这段时间，准备学习一门web前端技术，在angulerJs和vue之间选择有些犹豫知学哪个容易，最后通过论坛网友的建议，决定以vue来入手，今天把vue.js运行环境搭建好了，在此作一个备忘，也希望能给准备学习vue同学一个参考。&lt;/p&gt;
&lt;h2 id=&quot;Node环境安装&quot;&gt;&lt;a href=&quot;#Node环境安装&quot; class=&quot;headerlink&quot; title=&quot;Node环境安装&quot;&gt;&lt;/a&gt;Node环境安装&lt;/h2&gt;&lt;p&gt;如果没有安装nodejs,请前往&lt;a href=&quot;http://nodejs.cn/download/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://nodejs.cn/download/&lt;/a&gt; 进行下载，下载后运行，直接安装，根据提示完成安装。&lt;/p&gt;
&lt;p&gt;安装完成后，可以通过Win+R打开系统运行窗口，输入cmd,并在输入指令&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://www.felixwee.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="http://www.felixwee.com/tags/Vue/"/>
    
      <category term="webpack" scheme="http://www.felixwee.com/tags/webpack/"/>
    
      <category term="node" scheme="http://www.felixwee.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>Unity编辑器扩展之创建Lua,XML,Txt文件</title>
    <link href="http://www.felixwee.com/2018/04/03/lua/editor_createfile_extension/editor_createfile_extension/"/>
    <id>http://www.felixwee.com/2018/04/03/lua/editor_createfile_extension/editor_createfile_extension/</id>
    <published>2018-04-03T02:21:00.000Z</published>
    <updated>2018-04-05T03:18:12.504Z</updated>
    
    <content type="html"><![CDATA[<p>大家都知道，在Unity中创建Lua文件是很不方便的，大致的思路是自定义菜单项，然后点击菜单后，利用文件IO来创建lua文件，但感觉总是不理想，不能像创建C#代码那样，如果没有确认回车，代码就没有创建，后来经过搜索，总算找到一个自己觉得比较不错的方法，与大家分享一下。</p><p>这次的扩展，不仅可以创建lua文件，还可以创建xml,文件文件，并且我们可以完全自定义模板，简直是强爆了~！</p><a id="more"></a><p>好的，咱们进入正题吧。</p><h2 id="1-自定义菜单项"><a href="#1-自定义菜单项" class="headerlink" title="1.自定义菜单项"></a>1.自定义菜单项</h2><p>这是第一步，我们先来定义一个菜单项。<br>在Assets目录下创建一个Editor文件夹，然后新建DevExtEditor.cs，并删除继承关系。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DevExtEditor</span>   &#123;</span><br><span class="line"><span class="comment">/* 创建常用文件类型扩展</span></span><br><span class="line"><span class="comment">   MenuItem("菜单路径"，是否验证，优先级（显示顺序)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   [<span class="meta">MenuItem(<span class="meta-string">"Assets/Create/Lua Script"</span>,false,81)</span>]</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateLuaScript</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">      Debug.log(<span class="string">"Create Lua Script"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写好后，在Unity菜单里和Assets窗口右击，都可以看到自己定义的项。</p><p><img src="/2018/04/03/lua/editor_createfile_extension/editor_createfile_extension/20180405103620.jpg" alt=""></p><h2 id="2-创建文件的模板"><a href="#2-创建文件的模板" class="headerlink" title="2.创建文件的模板"></a>2.创建文件的模板</h2><p>我创建了三种格式的模板，分别是Lua,Xml,Text，当然这个我们可以自己添加其它格式，放在Editor路径下。</p><p><img src="/2018/04/03/lua/editor_createfile_extension/editor_createfile_extension/20180405103945.jpg" alt=""></p><p>因为Lua比较常用，所以lua文件的模板是下面这样的，#LuaClass# 是在创建文件时，需要替换成文件名,其它文件空白。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[  #LuaClass#  ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[定义lua类]</span></span><br><span class="line">#LuaClass#=&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">--[常用变量定义]</span></span><br><span class="line">this=#LuaClass#;</span><br><span class="line"><span class="keyword">local</span> transform;</span><br><span class="line"><span class="keyword">local</span> gameObject;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> #<span class="title">LuaClass</span>#.<span class="title">Awake</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> #<span class="title">LuaClass</span>#.<span class="title">Start</span><span class="params">()</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="3-函数调用及文件创建"><a href="#3-函数调用及文件创建" class="headerlink" title="3.函数调用及文件创建"></a>3.函数调用及文件创建</h2><p>在这里，使用到的UnityEditor当中的ProjectWindowUtil这个类，它的StartNameEditingIfProjectWindowExists()函数用来将焦点定位到文件上，并进行重命名。</p><p>整体代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DevExtEditor</span>   &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 创建常用文件类型扩展 */</span></span><br><span class="line">   [<span class="meta">MenuItem(<span class="meta-string">"Assets/Create/Lua Script"</span>,false,81)</span>]</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">CreateLuaScript</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">//获取创建代码时的文件路径下的所有对象</span></span><br><span class="line">       UnityEngine.Object[] arr = Selection.GetFiltered(<span class="keyword">typeof</span>(UnityEngine.Object), SelectionMode.TopLevel);</span><br><span class="line">       <span class="comment">//根据第一个文件获取不前文件夹路径</span></span><br><span class="line">       <span class="keyword">string</span> folder=AssetDatabase.GetAssetPath(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//将焦点定位到某个文件，并进行重命名</span></span><br><span class="line">       <span class="comment">//id,回调处理，新建文件url,图标，源始文件url    </span></span><br><span class="line">       ProjectWindowUtil.StartNameEditingIfProjectWindowExists(<span class="number">0</span>,ScriptableObject.CreateInstance&lt;CreateFileAction&gt;(),folder + <span class="string">"/NewLuaScript.lua"</span>, <span class="literal">null</span>, <span class="string">"Assets/Editor/FelixWeeTools/templates/lua_template.lua"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回调类处理:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> System.Text.RegularExpressions;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEditor.ProjectWindowCallback;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CreateFileAction</span> : <span class="title">EndNameEditAction</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Action</span>(<span class="params"><span class="keyword">int</span> instanceId, <span class="keyword">string</span> pathName, <span class="keyword">string</span> resourceFile</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        UnityEngine.Object obj = CreateScriptAssetFromTemplate(pathName, resourceFile);</span><br><span class="line">        ProjectWindowUtil.ShowCreatedAsset(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UnityEngine.<span class="function">Object <span class="title">CreateScriptAssetFromTemplate</span>(<span class="params"><span class="keyword">string</span> fullPath, <span class="keyword">string</span> resourceFile</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//读取原文件内容</span></span><br><span class="line">        StreamReader streamReader = <span class="keyword">new</span> StreamReader(resourceFile);</span><br><span class="line">        <span class="keyword">string</span> text = streamReader.ReadToEnd();</span><br><span class="line">        streamReader.Close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//只获取文件名不包括扩展名</span></span><br><span class="line">        <span class="keyword">string</span> fileNameWithoutExtension = Path.GetFileNameWithoutExtension(fullPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是Lua，对模板中变量进行替换</span></span><br><span class="line">        text =text.Replace(<span class="string">"#LuaClass#"</span>, fileNameWithoutExtension);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//将替换好的内容写入文件</span></span><br><span class="line">        StreamWriter streamWriter = <span class="keyword">new</span> StreamWriter(fullPath);</span><br><span class="line">        streamWriter.Write(text);</span><br><span class="line">        streamWriter.Close();</span><br><span class="line">        <span class="comment">//导入指定路径下的资源  </span></span><br><span class="line">        AssetDatabase.ImportAsset(fullPath);</span><br><span class="line">        <span class="comment">//返回指定路径下的Object对象</span></span><br><span class="line">        <span class="keyword">return</span> AssetDatabase.LoadAssetAtPath(fullPath, <span class="keyword">typeof</span>(UnityEngine.Object));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h2><p>当点击菜单后，即可以像创建C#代码一样进行重命名。</p><p><img src="/2018/04/03/lua/editor_createfile_extension/editor_createfile_extension/20180405110847.jpg" alt=""></p><h2 id="5-最后，大家可以把其它的格式也添加进来，下面的的导出的一个资源包，大家可以直接-下载使用。"><a href="#5-最后，大家可以把其它的格式也添加进来，下面的的导出的一个资源包，大家可以直接-下载使用。" class="headerlink" title="5.最后，大家可以把其它的格式也添加进来，下面的的导出的一个资源包，大家可以直接 下载使用。"></a>5.最后，大家可以把其它的格式也添加进来，下面的的导出的一个资源包，大家可以直接 下载使用。</h2><p><a href="./FelixWeeTool.unitypackage">下载扩展包</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家都知道，在Unity中创建Lua文件是很不方便的，大致的思路是自定义菜单项，然后点击菜单后，利用文件IO来创建lua文件，但感觉总是不理想，不能像创建C#代码那样，如果没有确认回车，代码就没有创建，后来经过搜索，总算找到一个自己觉得比较不错的方法，与大家分享一下。&lt;/p&gt;
&lt;p&gt;这次的扩展，不仅可以创建lua文件，还可以创建xml,文件文件，并且我们可以完全自定义模板，简直是强爆了~！&lt;/p&gt;
    
    </summary>
    
      <category term="lua" scheme="http://www.felixwee.com/categories/lua/"/>
    
    
      <category term="Lua" scheme="http://www.felixwee.com/tags/Lua/"/>
    
      <category term="Editor" scheme="http://www.felixwee.com/tags/Editor/"/>
    
      <category term="扩展" scheme="http://www.felixwee.com/tags/%E6%89%A9%E5%B1%95/"/>
    
      <category term="XML" scheme="http://www.felixwee.com/tags/XML/"/>
    
      <category term="Txt" scheme="http://www.felixwee.com/tags/Txt/"/>
    
  </entry>
  
  <entry>
    <title>VMWare安装Ubuntu系统</title>
    <link href="http://www.felixwee.com/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/"/>
    <id>http://www.felixwee.com/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/</id>
    <published>2018-03-27T03:01:00.000Z</published>
    <updated>2018-03-27T16:50:27.240Z</updated>
    
    <content type="html"><![CDATA[<p>作为一直使用windows系统开发的程序员来说，Linux系统看起来比较神秘，本人也不例外，为了能够了解熟悉linux系统，专门下载了虚拟机软件VMWare 14,来安装ubuntu系统。下面是安装的整个过程记录，希望能给大家起到一直指导的作用。</p><a id="more"></a><h2 id="工具下载"><a href="#工具下载" class="headerlink" title="工具下载"></a>工具下载</h2><ol><li><p>VMware Workstation 14  <a href="http://sw.bos.baidu.com/sw-search-sp/software/39fba669e1b70/VMware-workstation-full-14.1.1.28517.exe" target="_blank" rel="noopener">【下载】</a></p><p>序列号:<br>CG54H-D8D0H-H8DHY-C6X7X-N2KG6<br>ZC3WK-AFXEK-488JP-A7MQX-XL8YF<br>AC5XK-0ZD4H-088HP-9NQZV-ZG2R4<br>ZC5XK-A6E0M-080XQ-04ZZG-YF08D<br>ZY5H0-D3Y8K-M89EZ-AYPEG-MYUA8  </p></li><li><p>Ubuntu系统镜像文件 <a href="https://pan.baidu.com/s/1skXzcK1" target="_blank" rel="noopener">【下载】</a></p></li></ol><h2 id="安装VMWare-Workstation-14"><a href="#安装VMWare-Workstation-14" class="headerlink" title="安装VMWare Workstation 14"></a>安装VMWare Workstation 14</h2><p>应该软件的安装基本是点击 下一步完成，所以在此就不在赘述。</p><h2 id="在VMWare-Workstation中安装ubuntu系统"><a href="#在VMWare-Workstation中安装ubuntu系统" class="headerlink" title="在VMWare Workstation中安装ubuntu系统"></a>在VMWare Workstation中安装ubuntu系统</h2><p>1.创建新虚拟机</p><p> <img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180327235308.jpg" alt=""></p><p>2.在弹出的窗口中，选择典型（推荐），点击下一步</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180327235410.jpg" alt=""></p><p>3.在弹窗中选择 选择稍后安装系统,点击下一步</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180327235614.jpg" alt=""></p><p>4.在操作系统中选择Linux,下面选择ubuntu,点击下一步。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180327235913.jpg" alt=""></p><p>5.给虚拟机起名字，并选择存储路径，点击下一步</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180327235957.jpg" alt=""></p><p>5.调整文件大小，默认20G就够了，为了以后移动方便，选择 单个文件类型。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328000054.jpg" alt=""></p><p>6.选择自定义硬件，进行配置,选择之间下载好的iso文件。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328001546.jpg" alt=""></p><p>7.设置完成后，点击完成。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328000312.jpg" alt=""></p><p>8.回到VMWare主界面，选择刚刚创建好的虚拟机，进行启动。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328001731.jpg" alt=""></p><p>9.然后进入到下面的界面，我们选择简体，并点击 安装Install</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328002110.jpg" alt=""></p><p>10.点击继续,</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328002223.jpg" alt=""></p><p>继续<br><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328002301.jpg" alt=""></p><p>11.点击继续</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180116172102773.png" alt=""></p><p>12.双击或输入Shanghai 位置</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20160116172208839.png" alt=""></p><p>13.选择键盘布局</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20160116172249264.png" alt=""></p><p>14.设置账号和密码</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328002729.jpg" alt=""></p><p>15.正式进入安装.</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328002841.jpg" alt=""></p><p>16.安装完成后，会提示重启。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328003009.jpg" alt=""></p><p>17.重启成功后，会进入到桌面。到此安装完成。</p><p><img src="/2018/03/27/ubuntu/install_ubuntu/install_ubuntu/20180328004629.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一直使用windows系统开发的程序员来说，Linux系统看起来比较神秘，本人也不例外，为了能够了解熟悉linux系统，专门下载了虚拟机软件VMWare 14,来安装ubuntu系统。下面是安装的整个过程记录，希望能给大家起到一直指导的作用。&lt;/p&gt;
    
    </summary>
    
      <category term="ubuntu" scheme="http://www.felixwee.com/categories/ubuntu/"/>
    
    
      <category term="Linux" scheme="http://www.felixwee.com/tags/Linux/"/>
    
      <category term="ubuntu" scheme="http://www.felixwee.com/tags/ubuntu/"/>
    
      <category term="VMware" scheme="http://www.felixwee.com/tags/VMware/"/>
    
  </entry>
  
  <entry>
    <title>Unity调用Android的jar包</title>
    <link href="http://www.felixwee.com/2018/03/22/android/01Android%E4%B8%8EUnity%E4%BA%A4%E4%BA%92/android_unity_01/"/>
    <id>http://www.felixwee.com/2018/03/22/android/01Android与Unity交互/android_unity_01/</id>
    <published>2018-03-22T14:01:00.000Z</published>
    <updated>2018-03-21T17:25:18.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li>Android开发环境搭建</li><li>Android原生jar包创建</li><li>Unity调用Jar包</li><li>Android调用Unity</li></ul><h2 id="引语"><a href="#引语" class="headerlink" title="引语"></a>引语</h2><p>如果一个游戏，制作完成，需要在各游戏平台进行宣传，有可能接入各种平台的用户，这就需要和Android打交道，掌握Unity与android如何交互是必不可少的一项内容。</p><a id="more"></a><h2 id="讲解视频"><a href="#讲解视频" class="headerlink" title="讲解视频"></a>讲解视频</h2><video controls><br> <source id="mp4" src="unitycallandroid.mp4" type="video/mp4"><br></video><h2 id="Android原生Jar包的创建"><a href="#Android原生Jar包的创建" class="headerlink" title="Android原生Jar包的创建"></a>Android原生Jar包的创建</h2><h3 id="Eclipse操作"><a href="#Eclipse操作" class="headerlink" title="Eclipse操作"></a>Eclipse操作</h3><p>1.创建一个android项目，具体参数如下，点击下一步，直到完成:</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503164653.jpg" alt=""></p><p>2.导入unity编辑器的class.jar类库。<br>类库路径:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Unity5<span class="number">.4</span>\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Development\Classes</span><br></pre></td></tr></table></figure><p>将此文件复制到Eclipse项目中，并右键选择添加到库。</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503172128.jpg" alt=""></p><p>添加成功后，会在引用的库中显示:</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503172153.jpg" alt=""></p><p>3.修改MainAcitivity代码.<br> 修改MainAcitivity的基类为UnityPlayerActivity.并且删除OnCreateOptionsMenu和OnCreateOptionsMenuSelected函数.</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setContentView(R.layout.activity_main);</span><br></pre></td></tr></table></figure><p>在MainActivity中添加两个函数，一个用来弹出提示，一个用来计算两个int数的和.<br> 最终代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">package weifengan.lib.libdemo;</span><br><span class="line"></span><br><span class="line">import com.unity3d.player.UnityPlayerActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainActivity</span> <span class="title">extends</span> <span class="title">UnityPlayerActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span>(<span class="params">Bundle savedInstanceState</span>) </span>&#123;</span><br><span class="line">super.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出消息提示</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">Toast.makeText(getApplicationContext(), <span class="string">"这是一条提示信息"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.修改AndroidManifest.xml文件，将Activity使用全名称填写.</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503173318.jpg" alt=""></p><p>5.项目上右击，选择导出(Export…)项，选择Java中的jar文件包。</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503173407.jpg" alt="">  </p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503173442.jpg" alt=""></p><p>选择要导出的资源只选择Res和src文件夹.</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503173927.jpg" alt=""></p><p>最终等到jar文件，到此Eclipse打jar包完成。</p><h3 id="Unity操作"><a href="#Unity操作" class="headerlink" title="Unity操作"></a>Unity操作</h3><p>1.新建Unity项目，并切换平台到Android平台，在Assets目录下创建Plugins文件夹，里面创建Android文件夹。<br>2.找到Eclipse项目，将文件夹assets,res,src,AndroidManifest.xml文件，全部复制到Android目录下。</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503174532.jpg" alt=""></p><p>3.创建C#脚本挂到场景中任意对象上，并编写程序调用Android中定义的函数</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**************************************</span></span><br><span class="line"><span class="comment">*  文 件 名: CallDemo</span></span><br><span class="line"><span class="comment">*  描    述：</span></span><br><span class="line"><span class="comment">*  作　　者: 魏凤安</span></span><br><span class="line"><span class="comment">*  Q     Q: 1327797237</span></span><br><span class="line"><span class="comment">*  手机号码: 17746514110</span></span><br><span class="line"><span class="comment">*  电子邮箱: felixwee@163.com</span></span><br><span class="line"><span class="comment">*  博客地址: http://www.felixwee.com/</span></span><br><span class="line"><span class="comment">**************************************/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">CallDemo</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//在Unity创建两个按钮，点击后分别调用下面的函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShowTip</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//获取UNityPlayer类</span></span><br><span class="line">        AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">"com.unity3d.player.UnityPlayer"</span>);</span><br><span class="line">        AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">"currentActivity"</span>);</span><br><span class="line">        jo.Call(<span class="string">"Show"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.打开发布设置，在设置中设定好相关参数,如果参数设置与Ecipse不同，则可能导致出错。</p><p><img src="/2018/03/22/android/01Android与Unity交互/android_unity_01/20170503175905.jpg" alt=""></p><p>5.设置完成后，进行apk导出，然后在Android手机上进行测试吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;headerlink&quot; title=&quot;课程内容&quot;&gt;&lt;/a&gt;课程内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Android开发环境搭建&lt;/li&gt;
&lt;li&gt;Android原生jar包创建&lt;/li&gt;
&lt;li&gt;Unity调用Jar包&lt;/li&gt;
&lt;li&gt;Android调用Unity&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;引语&quot;&gt;&lt;a href=&quot;#引语&quot; class=&quot;headerlink&quot; title=&quot;引语&quot;&gt;&lt;/a&gt;引语&lt;/h2&gt;&lt;p&gt;如果一个游戏，制作完成，需要在各游戏平台进行宣传，有可能接入各种平台的用户，这就需要和Android打交道，掌握Unity与android如何交互是必不可少的一项内容。&lt;/p&gt;
    
    </summary>
    
      <category term="Android" scheme="http://www.felixwee.com/categories/Android/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="Android" scheme="http://www.felixwee.com/tags/Android/"/>
    
      <category term="调用Jar" scheme="http://www.felixwee.com/tags/%E8%B0%83%E7%94%A8Jar/"/>
    
  </entry>
  
  <entry>
    <title>UGUI中实现图片的灰度显示效果</title>
    <link href="http://www.felixwee.com/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/"/>
    <id>http://www.felixwee.com/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/</id>
    <published>2018-03-20T03:01:00.000Z</published>
    <updated>2018-03-27T14:22:15.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UGUI灰度图实现法"><a href="#UGUI灰度图实现法" class="headerlink" title="UGUI灰度图实现法"></a>UGUI灰度图实现法</h2><p>UGUI的image组件上有材质球插槽，那么很显然可以从这里入手，然后编写shader，挂载上去效果就出来了。<br>原图：</p><p><img src="/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/002wvREMgy6RcYPUsv567690.png" alt=""></p><p>灰色效果：</p><p><img src="/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/002wvREMgy6RcYQsGul61690.png" alt=""></p><a id="more"></a><p>Blending的渲染顺序：</p><p><img src="/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/002wvREMgy6Rd06GM1zf1.png" alt=""></p><p>新建一个shader，增加融合和变灰的代码即可。<br>通过这样的一个小例子，可以发现UGUI比NGUI在处理UI界面时，更容易通过shader去做一些效果。</p><h2 id="shader代码："><a href="#shader代码：" class="headerlink" title="shader代码："></a>shader代码：</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Shader <span class="string">"UI/Default Grey"</span>     </span><br><span class="line">&#123;     </span><br><span class="line">    Properties     </span><br><span class="line">    &#123;     </span><br><span class="line">        [<span class="meta">PerRendererData</span>] _MainTex (<span class="string">"Sprite Texture"</span>, <span class="number">2</span>D) = <span class="string">"white"</span> &#123;&#125;     </span><br><span class="line">        _Color (<span class="string">"Tint"</span>, Color) = (<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>)  </span><br><span class="line">    &#125;     </span><br><span class="line"></span><br><span class="line">    SubShader     </span><br><span class="line">    &#123;     </span><br><span class="line">        Tags     </span><br><span class="line">        &#123;      </span><br><span class="line">            <span class="string">"Queue"</span>=<span class="string">"Transparent"</span>      </span><br><span class="line">            <span class="string">"IgnoreProjector"</span>=<span class="string">"True"</span>      </span><br><span class="line">            <span class="string">"RenderType"</span>=<span class="string">"Transparent"</span>      </span><br><span class="line">            <span class="string">"PreviewType"</span>=<span class="string">"Plane"</span>     </span><br><span class="line">            <span class="string">"CanUseSpriteAtlas"</span>=<span class="string">"True"</span>     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="comment">// 源rgba*源a + 背景rgba*(1-源A值)   </span></span><br><span class="line">        Blend SrcAlpha OneMinusSrcAlpha  </span><br><span class="line"></span><br><span class="line">        Pass     </span><br><span class="line">        &#123;     </span><br><span class="line">            CGPROGRAM     </span><br><span class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> vertex vert     </span></span><br><span class="line">            <span class="meta">#<span class="meta-keyword">pragma</span> fragment frag     </span></span><br><span class="line">            <span class="meta">#include "UnityCG.cginc"     </span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> appdata_t     </span><br><span class="line">            &#123;     </span><br><span class="line">                float4 vertex   : POSITION;     </span><br><span class="line">                float4 color    : COLOR;     </span><br><span class="line">                float2 texcoord : TEXCOORD0;     </span><br><span class="line">            &#125;;     </span><br><span class="line"></span><br><span class="line">            <span class="keyword">struct</span> v2f     </span><br><span class="line">            &#123;     </span><br><span class="line">                float4 vertex   : SV_POSITION;     </span><br><span class="line">                fixed4 color    : COLOR;     </span><br><span class="line">                half2 texcoord  : TEXCOORD0;     </span><br><span class="line">            &#125;;     </span><br><span class="line"></span><br><span class="line">            sampler2D _MainTex;       </span><br><span class="line">            fixed4 _Color;     </span><br><span class="line"></span><br><span class="line">            <span class="function">v2f <span class="title">vert</span>(<span class="params">appdata_t IN</span>)     </span></span><br><span class="line"><span class="function">            </span>&#123;     </span><br><span class="line">                v2f OUT;     </span><br><span class="line">                OUT.vertex = mul(UNITY_MATRIX_MVP, IN.vertex);     </span><br><span class="line">                OUT.texcoord = IN.texcoord;     </span><br><span class="line">                <span class="meta">#ifdef UNITY_HALF_TEXEL_OFFSET     </span></span><br><span class="line">                     OUT.vertex.xy -= (_ScreenParams.zw<span class="number">-1.0</span>);     </span><br><span class="line">                <span class="meta">#<span class="meta-keyword">endif</span>     </span></span><br><span class="line">                OUT.color = IN.color * _Color;     </span><br><span class="line">                <span class="keyword">return</span> OUT;  </span><br><span class="line">            &#125;  </span><br><span class="line"></span><br><span class="line">            <span class="function">fixed4 <span class="title">frag</span>(<span class="params">v2f IN</span>) : SV_Target     </span></span><br><span class="line"><span class="function">            </span>&#123;     </span><br><span class="line">                <span class="comment">//获取贴图的颜色值</span></span><br><span class="line">                half4 color = tex2D(_MainTex, IN.texcoord) * IN.color;     </span><br><span class="line">                <span class="comment">//通过灰度计算公式，得到灰度值</span></span><br><span class="line">                <span class="keyword">float</span> grey = dot(color.rgb, fixed3(<span class="number">0.22</span>, <span class="number">0.707</span>, <span class="number">0.071</span>));   </span><br><span class="line">                <span class="comment">//返回将计算好的灰度值</span></span><br><span class="line">                <span class="keyword">return</span> half4(grey,grey,grey,color.a);     </span><br><span class="line">            &#125;     </span><br><span class="line">            ENDCG     </span><br><span class="line">        &#125;     </span><br><span class="line">    &#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UGUI灰度图实现法&quot;&gt;&lt;a href=&quot;#UGUI灰度图实现法&quot; class=&quot;headerlink&quot; title=&quot;UGUI灰度图实现法&quot;&gt;&lt;/a&gt;UGUI灰度图实现法&lt;/h2&gt;&lt;p&gt;UGUI的image组件上有材质球插槽，那么很显然可以从这里入手，然后编写shader，挂载上去效果就出来了。&lt;br&gt;原图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/002wvREMgy6RcYPUsv567690.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;灰色效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2018/03/20/ugui/ugui_grey_ui/ugui_grey_ui/002wvREMgy6RcYQsGul61690.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="UGUI" scheme="http://www.felixwee.com/categories/UGUI/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="UGUI" scheme="http://www.felixwee.com/tags/UGUI/"/>
    
      <category term="禁用效果" scheme="http://www.felixwee.com/tags/%E7%A6%81%E7%94%A8%E6%95%88%E6%9E%9C/"/>
    
      <category term="灰度效果" scheme="http://www.felixwee.com/tags/%E7%81%B0%E5%BA%A6%E6%95%88%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Unity中GL基础-直线，三角形，四边形</title>
    <link href="http://www.felixwee.com/2018/03/19/unity/gl_basic/gl_basic/"/>
    <id>http://www.felixwee.com/2018/03/19/unity/gl_basic/gl_basic/</id>
    <published>2018-03-19T14:01:00.000Z</published>
    <updated>2018-03-21T17:36:13.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是GL"><a href="#1-什么是GL" class="headerlink" title="1.什么是GL"></a>1.什么是GL</h2><p>GL(Graphics Library)是底层图像库，主要是可以使用程序来绘制2D或者3D图形。绘制出来的2D或者3D图形都是以面的形式渲染。</p><p>2D图形与3D图形的区别是2D图形在所有3D物体的上方，不会随摄像机的移动而改变，而3D图形会根据摄像机的移动而移动。绘制2D图形需要用到GL库 中的LoadOrtho方法，该方法的作用是做一个正交投影变换，将图形映射在屏幕中，而绘制3D图形与绘制2D唯一不同的是无需调用LoadOrtho方法。</p><p>GL可以绘制线段、三角形、三角形带(前三个点组成一个简单三角形，第四个点和前面两个点组成三角形，依次类推)和四边形。</p><a id="more"></a><p>值得注意的是，需要将绘制的内容写在OnPostRender方法中，该方法由系统调用，无法手动调用。只有将绘制图形的脚本<br>附于相机并启用时才会调用该方法，否则无法显示绘制的图形。</p><h2 id="2-绘制直线"><a href="#2-绘制直线" class="headerlink" title="2.绘制直线"></a>2.绘制直线</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DrawLineDemo</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> Material mat;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mat = <span class="keyword">new</span> Material(<span class="string">"Shader \"Lines/Colored Blended\" &#123;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"SubShader &#123; Pass &#123;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"   BindChannels &#123; Bind \"Color\",color &#125;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"   Blend SrcAlpha OneMinusSrcAlpha"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"   ZWrite Off Cull Off Fog &#123; Mode Off &#125;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"&#125; &#125; &#125;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();</span><br><span class="line">        mat.SetPass(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//绘制2D线段，注释掉GL.LoadOrtho();则绘制3D图形</span></span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line">        <span class="comment">//开始绘制直线类型，需要两个顶点</span></span><br><span class="line">        GL.Begin(GL.LINES);</span><br><span class="line">        <span class="comment">//绘制起点，绘制的点需在Begin和End之间</span></span><br><span class="line">        GL.Vertex3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/03/19/unity/gl_basic/gl_basic/画线段.jpg" alt=""></p><h2 id="2-绘制三角形"><a href="#2-绘制三角形" class="headerlink" title="2.绘制三角形"></a>2.绘制三角形</h2><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DrawTriangle</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Material mat;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        mat = <span class="keyword">new</span> Material(<span class="string">"Shader \"Lines/Colored Blended\" &#123;"</span> +</span><br><span class="line"></span><br><span class="line"><span class="string">"SubShader &#123; Pass &#123;"</span> +</span><br><span class="line"></span><br><span class="line"><span class="string">"   BindChannels &#123; Bind \"Color\",color &#125;"</span> +</span><br><span class="line"></span><br><span class="line"><span class="string">"   Blend SrcAlpha OneMinusSrcAlpha"</span> +</span><br><span class="line"></span><br><span class="line"><span class="string">"   ZWrite Off Cull Off Fog &#123; Mode Off &#125;"</span> +</span><br><span class="line"></span><br><span class="line"><span class="string">"&#125; &#125; &#125;"</span>);</span><br><span class="line"></span><br><span class="line">        mat.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line"></span><br><span class="line">        mat.shader.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Input.GetMouseButtonDown(<span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="string">"press mousedown"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DrawATriangle</span>(<span class="params"> Material mat</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();</span><br><span class="line">        mat.SetPass(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line"></span><br><span class="line">        GL.Begin(GL.TRIANGLES);</span><br><span class="line"></span><br><span class="line">        GL.Vertex3(<span class="number">0.2</span>f, <span class="number">0.2</span>f, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0.3</span>f, <span class="number">0.6</span>f, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0.7</span>f, <span class="number">0.5</span>f, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DrawATriangle( mat);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/03/19/unity/gl_basic/gl_basic/画三角形.jpg" alt=""></p><h2 id="画四边形"><a href="#画四边形" class="headerlink" title="画四边形"></a>画四边形</h2><p>Unity中原点(0,0)是在屏幕的左下角,右上角为(1,1)<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Draw3DRect</span> : <span class="title">MonoBehaviour</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Material mat;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use this for initialization</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        mat = <span class="keyword">new</span> Material(<span class="string">"Shader \"Lines/Colored Blended\" &#123;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"SubShader &#123; Pass &#123;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"   BindChannels &#123; Bind \"Color\",color &#125;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"   Blend SrcAlpha OneMinusSrcAlpha"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"   ZWrite Off Cull Off Fog &#123; Mode Off &#125;"</span> +</span><br><span class="line"></span><br><span class="line">    <span class="string">"&#125; &#125; &#125;"</span>);</span><br><span class="line"></span><br><span class="line">        mat.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line"></span><br><span class="line">        mat.shader.hideFlags = HideFlags.HideAndDontSave;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update is called once per frame</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnPostRender</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        GL.PushMatrix();</span><br><span class="line">        mat.SetPass(<span class="number">0</span>);</span><br><span class="line">        GL.LoadOrtho();</span><br><span class="line">        GL.Begin(GL.QUADS);</span><br><span class="line">        GL.Color(Color.red);</span><br><span class="line">        GL.Vertex3(<span class="number">0</span>, <span class="number">0.5</span>F, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0.5</span>F, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">1</span>, <span class="number">0.5</span>F, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0.5</span>F, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        GL.Color(Color.cyan);</span><br><span class="line">        GL.Vertex3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0</span>, <span class="number">0.25</span>F, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0.25</span>F, <span class="number">0.25</span>F, <span class="number">0</span>);</span><br><span class="line">        GL.Vertex3(<span class="number">0.25</span>F, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        GL.End();</span><br><span class="line">        GL.PopMatrix();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/03/19/unity/gl_basic/gl_basic/GL画四边形.jpg" alt="画四边形"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是GL&quot;&gt;&lt;a href=&quot;#1-什么是GL&quot; class=&quot;headerlink&quot; title=&quot;1.什么是GL&quot;&gt;&lt;/a&gt;1.什么是GL&lt;/h2&gt;&lt;p&gt;GL(Graphics Library)是底层图像库，主要是可以使用程序来绘制2D或者3D图形。绘制出来的2D或者3D图形都是以面的形式渲染。&lt;/p&gt;
&lt;p&gt;2D图形与3D图形的区别是2D图形在所有3D物体的上方，不会随摄像机的移动而改变，而3D图形会根据摄像机的移动而移动。绘制2D图形需要用到GL库 中的LoadOrtho方法，该方法的作用是做一个正交投影变换，将图形映射在屏幕中，而绘制3D图形与绘制2D唯一不同的是无需调用LoadOrtho方法。&lt;/p&gt;
&lt;p&gt;GL可以绘制线段、三角形、三角形带(前三个点组成一个简单三角形，第四个点和前面两个点组成三角形，依次类推)和四边形。&lt;/p&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="http://www.felixwee.com/categories/Unity3D/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="GL绘图" scheme="http://www.felixwee.com/tags/GL%E7%BB%98%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>Raspberry Pi无法输出声音</title>
    <link href="http://www.felixwee.com/2018/03/13/raspi/01_%E6%A0%91%E8%8E%93%E6%B4%BE%E6%B2%A1%E6%9C%89%E9%9F%B3%E9%A2%91%E8%BE%93%E5%87%BA/raspi_no_sound/"/>
    <id>http://www.felixwee.com/2018/03/13/raspi/01_树莓派没有音频输出/raspi_no_sound/</id>
    <published>2018-03-13T02:01:00.000Z</published>
    <updated>2018-03-13T14:19:09.710Z</updated>
    
    <content type="html"><![CDATA[<p>大家好，我是felixwee,今天从新安装了一个树莓派系统，安装了中文支持和输入法，但是接上音箱后，想来一个放松，放首音乐听听，结果，插上耳机去没有声音，经过度娘的帮助 ，找到了答案。在些做一记录。</p><p>实际上raspberry pi内置了两种音频输出模式，分别是:</p><ul><li>HDMI</li><li>耳机接口。</li></ul><p>耳机孔没有声音的原因是音频输出采用的是HDMI方式，所以只需要进行一个切换就OK了。<br><a id="more"></a></p><p>这里有两种方式进行修改：</p><h3 id="1-通过命令行修改"><a href="#1-通过命令行修改" class="headerlink" title="1.通过命令行修改"></a>1.通过命令行修改</h3><p>amixer，是alsamixer的文本模式,即命令行模式，需要用amixer命令的形式去配置你的声卡的各个选项。</p><p>打开终端,输入下面命令将会切换到耳机孔输出模式<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">amixer cset numid=<span class="number">3</span> <span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>这里将输出设置为2，也就是HDMI。<br>将输出设置为1将切换到模拟信号（也就是耳机接口）。<br>默认的设置为0，代表自动选择。  </p><h3 id="2-通过raspi设置"><a href="#2-通过raspi设置" class="headerlink" title="2.通过raspi设置"></a>2.通过raspi设置</h3><p>在命令行中输入raspi-config打开raspi-config工具:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo raspi-config</span><br></pre></td></tr></table></figure><p>在打开界面中，选中【Advanced Options】按回车：</p><p><img src="/2018/03/13/raspi/01_树莓派没有音频输出/raspi_no_sound/20180313220435569.jpg" alt=""></p><p>进入后，选择【Audio】</p><p><img src="/2018/03/13/raspi/01_树莓派没有音频输出/raspi_no_sound/20180313221101302.jpg" alt=""></p><p>进入Audio后有3个选项，选择响应的项按回车就OK了。</p><p><img src="/2018/03/13/raspi/01_树莓派没有音频输出/raspi_no_sound/20180313221254152.jpg" alt=""></p><p>经过上面的折腾，总处可以播放音乐了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大家好，我是felixwee,今天从新安装了一个树莓派系统，安装了中文支持和输入法，但是接上音箱后，想来一个放松，放首音乐听听，结果，插上耳机去没有声音，经过度娘的帮助 ，找到了答案。在些做一记录。&lt;/p&gt;
&lt;p&gt;实际上raspberry pi内置了两种音频输出模式，分别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HDMI&lt;/li&gt;
&lt;li&gt;耳机接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;耳机孔没有声音的原因是音频输出采用的是HDMI方式，所以只需要进行一个切换就OK了。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Raspberry PI" scheme="http://www.felixwee.com/categories/Raspberry-PI/"/>
    
    
      <category term="Raspberry" scheme="http://www.felixwee.com/tags/Raspberry/"/>
    
      <category term="嵌入式" scheme="http://www.felixwee.com/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Unity调用AndroidStudio导出的Jar包</title>
    <link href="http://www.felixwee.com/2018/03/11/unity/AndroidStudio%E5%AF%BC%E5%87%BAJar%E5%8C%85%E4%B8%8EUnity%E4%BA%A4%E4%BA%92/AndroidStudio%E5%AF%BC%E5%87%BAJar%E5%8C%85%E4%B8%8EUnity%E4%BA%A4%E4%BA%92/"/>
    <id>http://www.felixwee.com/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/</id>
    <published>2018-03-11T02:01:00.000Z</published>
    <updated>2018-03-10T17:11:08.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="课程内容"><a href="#课程内容" class="headerlink" title="课程内容"></a>课程内容</h2><ul><li>制作步骤介绍</li><li>创建AndroidStudio工程及Jar包导出</li><li>Unity中调用Jar包函数</li></ul><h2 id="制作步骤"><a href="#制作步骤" class="headerlink" title="制作步骤"></a>制作步骤</h2><p>大致步骤如下：</p><ol><li>创建新的 Android Studio 工程</li><li>为此 Android Studio 工程创建 Android Library 类库（也就是一个 Module）（后面就是用它生成 jar）</li><li>生成 Jar</li><li>将 jar 导入 Unity 工程中的 Assets/Plugins/Android/</li><li>使用 AndroidJavaObject.Call 等方式调用</li></ol><a id="more"></a><h2 id="创建新Android-Studio-工程"><a href="#创建新Android-Studio-工程" class="headerlink" title="创建新Android Studio 工程"></a>创建新Android Studio 工程</h2><h4 id="1-设置好-名称-、-路径-、-包名"><a href="#1-设置好-名称-、-路径-、-包名" class="headerlink" title="1.设置好 名称 、 路径 、 包名"></a>1.设置好 名称 、 路径 、 包名</h4><p>这里的 Package name 只是这个 Android Studio 工程的包名，而我们需要的并不是这个工程，我们后面会在这个工程内新建一个 Android Library 类库，这个类库才是我们要导出 Jar 的对象。所以，这个 Android Studio 工程的 Application name 、Company Domain 、Package name 这三个参数可以随意填写，并不需要与正式工程相同。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-a8a272c77e65fac1.png" alt=""></p><h4 id="2-选择-SDK-版本"><a href="#2-选择-SDK-版本" class="headerlink" title="2.选择 SDK 版本"></a>2.选择 SDK 版本</h4><p>这里的意思是选择一个可兼容的最低的 Android 系统版本。自行选择，随意。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-01dff0ff3f06ba08.png" alt=""></p><h4 id="3-选择-Empty-Activity"><a href="#3-选择-Empty-Activity" class="headerlink" title="3.选择 Empty Activity"></a>3.选择 Empty Activity</h4><p>直接选择空的 Activity 就可以了，因为这个是本工程的 Activity，并不是我们要导出的 Jar 的 Activity。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-cdc87b3ef67e72dc.png" alt=""></p><h4 id="4-给此-Activity-定义参数"><a href="#4-给此-Activity-定义参数" class="headerlink" title="4.给此 Activity 定义参数"></a>4.给此 Activity 定义参数</h4><p>同样，因为这个是本工程的 Activity，并不是我们要导出的 Jar 的 Activity。所以随意填写，和要导出的 Jar 无关。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-aaa693d0ae3f81ed.png" alt=""></p><h4 id="5-新建-Module"><a href="#5-新建-Module" class="headerlink" title="5.新建 Module"></a>5.新建 Module</h4><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-2be33ab0444b96b1.png" alt=""></p><h4 id="6-选择-Android-Library"><a href="#6-选择-Android-Library" class="headerlink" title="6.选择 Android Library"></a>6.选择 Android Library</h4><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-4fd0fd7a392fcbeb.png" alt=""></p><h4 id="7-输入-Module-的参数"><a href="#7-输入-Module-的参数" class="headerlink" title="7.输入 Module 的参数"></a>7.输入 Module 的参数</h4><p>这里的参数就是要导出 jar 的 Android Library 类库参数。Package name 与正式工程一致。 Application/Library name 就是就填你要导出的 jar 插件的名称。Module name 自动填写就不用管了。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-a42b0cbb4a8685d5.png" alt=""></p><h4 id="8-导入Unity的classes-jar"><a href="#8-导入Unity的classes-jar" class="headerlink" title="8.导入Unity的classes.jar"></a>8.导入Unity的classes.jar</h4><p>找到 Unity 中的 classes.jar 导入到这个 Module 的 libs 中。classes.jar 在安装路径的相对路径如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\Editor\Data\PlaybackEngines\AndroidPlayer\Variations\mono\Release\Classes\classes.jar</span><br></pre></td></tr></table></figure><p><strong>（Project 视图下可以看到 libs 文件夹）</strong></p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-e67658c514e06467.png" alt=""></p><h4 id="9-把-classes-jar-加入依赖。点击-File-gt-Project-Structure"><a href="#9-把-classes-jar-加入依赖。点击-File-gt-Project-Structure" class="headerlink" title="9.把 classes.jar 加入依赖。点击 File-&gt;Project Structure"></a>9.把 classes.jar 加入依赖。点击 File-&gt;Project Structure</h4><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-346cf1f218345413.png" alt=""></p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-9b7171a4887fc019.png" alt=""></p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-2313fe7fc1b69636.png" alt=""></p><p>Modules 选择自己新建的 Android Library，中间栏点 Dependencies 标签，然后点击右侧加号+，选择 File Dependency，(新版本Android Studio中为:jar Dependency) 然后找到自己拷贝进来的在 libs 目录下的 classes.jar 点击OK</p><h4 id="10-给-Module-添加-Activity-Class"><a href="#10-给-Module-添加-Activity-Class" class="headerlink" title="10.给 Module 添加 Activity Class"></a>10.给 Module 添加 Activity Class</h4><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-3ae6bd3cb4fe1d99.png" alt=""></p><p>给新建的 Class 命名。输入 Name 然后点击 OK。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-6dbbf9d6fa1fad42.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.myjar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.unity3d.player.UnityPlayerActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span>  <span class="keyword">extends</span> <span class="title">UnityPlayerActivity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(bundle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ShareText</span><span class="params">(String message, String body)</span> </span>&#123;</span><br><span class="line">        Intent sharingIntent = <span class="keyword">new</span> Intent(android.content.Intent.ACTION_SEND);</span><br><span class="line">        sharingIntent.setType(<span class="string">"text/plain"</span>);</span><br><span class="line">        sharingIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, message);</span><br><span class="line">        sharingIntent.putExtra(android.content.Intent.EXTRA_TEXT, body);</span><br><span class="line">        startActivity(Intent.createChooser(sharingIntent, <span class="string">"Share via"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-修改-build-gradle"><a href="#10-修改-build-gradle" class="headerlink" title="10.修改 build.gradle"></a>10.修改 build.gradle</h4><p>双击 build.gradle，修改代码，注意修改的是自己新建的 Library 的build.gradle，不是整个 project 的 build.gradle</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-4d7d75884390ddf2.png" alt=""></p><p>在 build.gradle 末尾添加以下代码，表示添加了一个 Task 任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//task to export contents as jar</span></span><br><span class="line"><span class="function">task <span class="title">ExportJar</span><span class="params">(type: Copy)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//用来删除之前导出的jar文件</span></span><br><span class="line">    delete <span class="string">'release/AndroidPlugin.jar'</span></span><br><span class="line">    <span class="comment">//指定将什么内容打包到jar包中，此处为bundles/release文件内容打包进jar文件.</span></span><br><span class="line">    <span class="comment">//请确认此目录是否存在(没有relase 可选择其它，如default)</span></span><br><span class="line">    from(<span class="string">'build/intermediates/bundles/release/'</span>)</span><br><span class="line">    <span class="comment">//打包好的文件存储在Build目录下什么地方</span></span><br><span class="line">    into(<span class="string">'release/'</span>)</span><br><span class="line">    <span class="comment">//打包时要包含哪些包</span></span><br><span class="line">    include(<span class="string">'classes.jar'</span>)</span><br><span class="line">    <span class="comment">//生成生进行重命名</span></span><br><span class="line">    rename(<span class="string">'classes.jar'</span>, <span class="string">'AndroidPlugin.jar'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行此任务</span></span><br><span class="line">ExportJar.dependsOn(build)</span><br></pre></td></tr></table></figure><h4 id="11-刷新-gradle"><a href="#11-刷新-gradle" class="headerlink" title="11.刷新 gradle"></a>11.刷新 gradle</h4><p>一般情况下修改了 build.gradle 后，系统上方会让你 SyncNow，还可以手动刷新一下，右侧点击 Gradle 标签，选中自己的 Library，右击选择Refresh external project</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-0e4b00bdd4170065.png" alt=""></p><h4 id="12-生成-Jar"><a href="#12-生成-Jar" class="headerlink" title="12.生成 Jar"></a>12.生成 Jar</h4><p>在上一步的窗口中（Gradle projects窗口）往下翻，可以在自己的 Library 展开项的 other 的展开项中找到 exportJar ，双击，然后等待完成。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-6bf70ce14827681b.png" alt=""></p><p>然后就可以在 release 目录下面找到生成好的 jar 包了，右击这个 jar 包选择 Show in Explorer 就可以拿到这个 jar 包了。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-a264b15f665ecc26.png" alt=""></p><h2 id="Unity调用Jar包"><a href="#Unity调用Jar包" class="headerlink" title="Unity调用Jar包"></a>Unity调用Jar包</h2><h4 id="1-导入-Unity"><a href="#1-导入-Unity" class="headerlink" title="1.导入 Unity"></a>1.导入 Unity</h4><p>将拿到的 jar 放到 unity 工程的 Asset/Plugins/Android/ 目录下。没有的话就手动创建目录。</p><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-58ca22bf42de42b3.png" alt=""></p><h4 id="2-修改或添加-AndroidManifest-xml"><a href="#2-修改或添加-AndroidManifest-xml" class="headerlink" title="2.修改或添加 AndroidManifest.xml"></a>2.修改或添加 AndroidManifest.xml</h4><p>(重要，请仔细阅读，真正理解 AndroidManifest 才是最快的方式)</p><p>如果你是新工程，没有使用过其他 android 的 sdk（指的是 unity 的插件），应该是没有AndroidManifest.xml文件的，这样可以在 Asset/Plugins/Android/ 目录下新建一个 AndroidManifest.xml。</p><p>先介绍新加一个 AndroidManifest.xml</p><p><strong>需要注意:</strong><br>的就是主 activity 的 android:name 需要为 用于导出 jar 的 Library 的包名 + 我们导出的 jar 的主类名,就像下方第4行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.myjar.MyActivity</span><br></pre></td></tr></table></figure><p>（这个包名，其实也就是 unity 工程 Player Settings 中填写的包名，因为他们需要一致）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.VIBRATE"</span>&gt;</span><span class="tag">&lt;/<span class="name">uses-permission</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/app_icon"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.example.myjar.MyActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:configChanges</span>=<span class="string">"fontScale|keyboard|keyboardHidden|locale|mnc|mcc|navigation|orientation|screenLayout|screenSize|smallestScreenSize|uiMode|touchscreen"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改 AndroidManifest.xml</p><p>如果你之前的工程有使用过其他的 Android 的 SDK（指的是 unity 的插件），那么在 Asset/Plugins/Android/ 目录下应该已经有一个 AndroidManifest.xml，那么你就需要将这次导出的 jar 的 activity 添加到这个 AndroidManifest.xml 中进行注册。</p><p>一个 AndroidManifest.xml 只有一个主 activity （直接的观察就是这个 activity 标签中包含了下面这段标签）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><p>（这里需要强调一下，本文是基于 unity 的 Android 平台的）<br>而 unity 工程，需要将继承了 UnityPlayerActivity 或者 UnityNativePlayerActivity 的 Activity （见上面第9步）为启动 Activity ，才可以在 Android 平台（说白了就是手机等等）启动你的 unity 工程。而这个 “设置为启动 Activity ” 的步骤，就是在 AndroidManifest.xml 中完成的，也就是在 AndroidManifest.xml 中将这个 Activity 注册为主 Activity 。</p><p>还有，你在 unity 中做的所有东西，发布到 Android 上，就只有一个 Activity，你如果在 unity 中唤起了其他的 Activity，就会像手机后台切应用一样的切换到你唤起的这个 Activity。所以，进行 unity 的 android 插件开发，只有一个入口，也就是继承 UnityPlayerActivity 或者 UnityNativePlayerActivity （UnityNativePlayerActivity 其实就是继承UnityPlayerActivity 的一个类，并没有进行任何操作）。</p><p>理解了这些之后，就能理解为什么一般的 unity 插件，并不会将自己的 Activity 注册成主 Activity，所以你只需要将他们的 Activity 标签复制粘贴到你的 AndroidManifest.xml（Asset/Plugins/Android/ 目录下，一个工程只需要一个 AndroidManifest.xml（多个的用法本文不涉及，你只需要知道，Asset/Plugins/Android/ 目录下仅有一个 AndroidManifest.xml 文件））中就可以了（如果他们的 Activity 标签有上面提到的 “intent-filter” 标签 也就是被标记成主 Activity，你就要考虑，他们的功能是需要在 unity 的这个主 Activity 启动就响应的，还是切换另外一个 Activity 才进行操作的）。</p><p>所以，综上，如果是你自行开发的多个 unity Android 插件（jar），就需要尽量先在 Android 层合并成一个 jar 插件包，以保证只有一个入口，一个主 Activity 。不光是自行开发的，使用其他 sdk 的时候，也要想，如果可以直接在 Android 层进行合并操作（统一一个 Activity 入口，然后所有调用其他 sdk 功能的接口全部放在这个 Activity 中）的，就尽量在 Android 层进行。</p><p>多个 unity Android 插件（jar）合并的时候，难的部分其实也不难，就是理解他们的功能，然后合并 AndroidManifest.xml 的操作。</p><h4 id="3-调用-jar-插件中的接口"><a href="#3-调用-jar-插件中的接口" class="headerlink" title="3.调用 jar 插件中的接口"></a>3.调用 jar 插件中的接口</h4><p>unity 中调用 android 层的接口基本都是通过 AndroidJavaClass 、AndroidJavaObject 的方式。<br>比如，上面我导出的 jar 插件中，在 MyActivity 类中我写了一个 ShareText(String , String ) 的接口（第9步），那么我在 unity 中就可以通过以下代码调用这个接口。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AndroidJavaClass jc = <span class="keyword">new</span> AndroidJavaClass(<span class="string">"com.unity3d.player.UnityPlayer"</span>);</span><br><span class="line">AndroidJavaObject jo = jc.GetStatic&lt;AndroidJavaObject&gt;(<span class="string">"currentActivity"</span>);</span><br><span class="line"><span class="keyword">string</span> message = <span class="string">"this is my title"</span>;</span><br><span class="line"><span class="keyword">string</span> body = <span class="string">"this is my content"</span>;</span><br><span class="line">jo.Call(<span class="string">"ShareText"</span>, message, body);</span><br></pre></td></tr></table></figure><p>如果你需要唤起其他的 Activity，就在上方第二行，将 “currentActivity” 改成你在 AndroidManifest.xml 中注册的 Activity 名字，然后就可以通过 AndroidJavaObject.Call 的方式调用那个 Activity 类里的接口。如果这个接口在这个 Activity 类里被标记成了 static，还可以通过AndroidJavaObject.CallStatic 的方式调用。</p><p>第一行的 “com.unity3d.player.UnityPlayer” 是需要调用的接口所在的 Activity 所在的包名，如果是 unity 主 Activity ，就可以直接使用 “com.unity3d.player.UnityPlayer”，如果是其他插件包，就使用那个包的包名。</p><h4 id="4-效果"><a href="#4-效果" class="headerlink" title="4.效果"></a>4.效果</h4><p><img src="/2018/03/11/unity/AndroidStudio导出Jar包与Unity交互/AndroidStudio导出Jar包与Unity交互/5319538-47b9a4fef3c2818e.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在以前eclipse是作为android开发胡主流工具，从Android Studio退出后由于功能左强大被广泛使用。本文以AndroidStudio为例，导出jar包，供Unity进行调用，这也是接入SDK的重要基础.</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1.<a href="http://blog.csdn.net/u014230923/article/details/51363556" target="_blank" rel="noopener">Android Studio 2.1 和 Unity3D 5.3.4 交互</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;课程内容&quot;&gt;&lt;a href=&quot;#课程内容&quot; class=&quot;headerlink&quot; title=&quot;课程内容&quot;&gt;&lt;/a&gt;课程内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;制作步骤介绍&lt;/li&gt;
&lt;li&gt;创建AndroidStudio工程及Jar包导出&lt;/li&gt;
&lt;li&gt;Unity中调用Jar包函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;制作步骤&quot;&gt;&lt;a href=&quot;#制作步骤&quot; class=&quot;headerlink&quot; title=&quot;制作步骤&quot;&gt;&lt;/a&gt;制作步骤&lt;/h2&gt;&lt;p&gt;大致步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建新的 Android Studio 工程&lt;/li&gt;
&lt;li&gt;为此 Android Studio 工程创建 Android Library 类库（也就是一个 Module）（后面就是用它生成 jar）&lt;/li&gt;
&lt;li&gt;生成 Jar&lt;/li&gt;
&lt;li&gt;将 jar 导入 Unity 工程中的 Assets/Plugins/Android/&lt;/li&gt;
&lt;li&gt;使用 AndroidJavaObject.Call 等方式调用&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Unity3D" scheme="http://www.felixwee.com/categories/Unity3D/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="SDK接入" scheme="http://www.felixwee.com/tags/SDK%E6%8E%A5%E5%85%A5/"/>
    
      <category term="Android Studio" scheme="http://www.felixwee.com/tags/Android-Studio/"/>
    
      <category term="Jar包" scheme="http://www.felixwee.com/tags/Jar%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>AR体验之Vuforia学习</title>
    <link href="http://www.felixwee.com/2017/12/09/ar/vuforia-intro/vuforia_intro/"/>
    <id>http://www.felixwee.com/2017/12/09/ar/vuforia-intro/vuforia_intro/</id>
    <published>2017-12-09T12:01:00.000Z</published>
    <updated>2018-03-09T12:51:10.746Z</updated>
    
    <content type="html"><![CDATA[<p>最近一直忙备课，没抽出时间写课件，这是一遍给同学讲高通AR插件Vuforia的课件，拿出来给大家分享一下吧，以后会不定期更新博客。本博客主要是通过扫描一张图片，显示出对应模型的例子，希望能帮到那些想学习AR知识的童鞋！<br>因为时间久了，图片和模型暂时找不到，大家随便找一张图片代替，模型直接换成经典的Cube吧。</p><a id="more"></a><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li>能够使用Vuforia插件制作AR识别图片类型</li></ul><h2 id="Vuforia插件下载"><a href="#Vuforia插件下载" class="headerlink" title="Vuforia插件下载"></a>Vuforia插件下载</h2><ul><li>官网下载<br><a href="https://developer.vuforia.com/downloads/sdk" target="_blank" rel="noopener">https://developer.vuforia.com/downloads/sdk</a></li></ul><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226214358.jpg" alt=""></p><h2 id="Vuforia实现图片识别"><a href="#Vuforia实现图片识别" class="headerlink" title="Vuforia实现图片识别"></a>Vuforia实现图片识别</h2><p>在制作以下案例时，需要提前在Vuforia官网注册账号，具体注册细节，不在这里赘述。</p><p>1.新建项目,名称为ARDemo,导入下载的Vuforia插件。</p><p>2.新建场景，将默认的摄像机MainCamera删除，将Vuforia/Prefabs中的ARCamera和ImageTarget预置体拖动到场景中，并调整摄像机视角。</p><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226220407.jpg" alt=""></p><p>调整摄像机位置后，最终效果如图,由于还没有选择要进行识别的图片，所以当前面板还是空白的，添加完所要识别的图片后，应用会通过检测摄像头拍摄的现实世界画面，与此图进行对比。</p><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226221032.jpg" alt=""></p><p>3.由于高通的图片识别都需要先将待识别的图片上传到其内部的图片库中，所以这里我们需要先到开发者后台完成一些准备工作。</p><p> a.打开链接：开发者后台，创建一个新的Database,选择Device</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226223717.jpg" alt=""></p><p> b.在新建的Database中点击Add Target按钮添加要识别的图片文件<br> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226223910.jpg" alt=""></p><p> 选择单图片识别，并选择要就别的图片文件，添写好后，点击Add后开始上传图片<br> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226224416.jpg" alt=""></p><p> 图片上传成功后，如下图</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226224522.jpg" alt=""></p><p> c.选中刚刚创建好的Target，点击右侧按钮 Download Database(All)，从中选择Unity Editor.</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226225142.jpg" alt=""></p><p> d.点击Download后，会生成与StudyAR同名的资源包: <strong>StudyAR.unitypackage</strong>.</p><p>4.将下载的StudyAR.unitypackage资源包导入Unity，完成后返回到ImageTarget组件上的Image Target Behaviour组件，选中指定的Database中指定的Target图片。</p><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226230329.jpg" alt=""></p><p>我们可以看到ImageTarget显示我们选中的图片.</p><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226230451.jpg" alt=""></p><p>5.将要显示的3D模型拖动到ImageTarget组件下，并调整好位置及大小。</p><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226232857.jpg" alt=""></p><p>6.选中ARCamera游戏对象，打开Vuforia Behaviour组件上的Open Vuforia Configuration</p><p><img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226230740.jpg" alt=""></p><p>7.配置项<br>第一项是App License Key,这个需要在官网上进行创建。在Dev中选择License  Manager项，点击Add License Key.</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226231552.jpg" alt=""></p><p> 点击Next进行确认</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226231659.jpg" alt=""></p><p> 然后在License 列表中点击刚创建的StudyAR项，进入后即可看到Key,如下图</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226231817.jpg" alt=""></p><p> 复制后，粘贴到ARCamera上打开的配置项中的App License Key中,并将</p><p> <img src="/2017/12/09/ar/vuforia-intro/vuforia_intro/20170226232117.jpg" alt=""></p><ol><li>到此所有的操作已经完成,进行Android APK发布，然后测试可以看到效果。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近一直忙备课，没抽出时间写课件，这是一遍给同学讲高通AR插件Vuforia的课件，拿出来给大家分享一下吧，以后会不定期更新博客。本博客主要是通过扫描一张图片，显示出对应模型的例子，希望能帮到那些想学习AR知识的童鞋！&lt;br&gt;因为时间久了，图片和模型暂时找不到，大家随便找一张图片代替，模型直接换成经典的Cube吧。&lt;/p&gt;
    
    </summary>
    
      <category term="AR" scheme="http://www.felixwee.com/categories/AR/"/>
    
    
      <category term="AR" scheme="http://www.felixwee.com/tags/AR/"/>
    
      <category term="Vuforia" scheme="http://www.felixwee.com/tags/Vuforia/"/>
    
      <category term="高通" scheme="http://www.felixwee.com/tags/%E9%AB%98%E9%80%9A/"/>
    
  </entry>
  
  <entry>
    <title>Unity操作MySQL数据库（增删改查)</title>
    <link href="http://www.felixwee.com/2017/01/17/database/00015_unity_mysql/unity_op_mysql/"/>
    <id>http://www.felixwee.com/2017/01/17/database/00015_unity_mysql/unity_op_mysql/</id>
    <published>2017-01-17T05:00:00.000Z</published>
    <updated>2018-03-10T15:59:18.763Z</updated>
    
    <content type="html"><![CDATA[<p>好久没有更新博客了，今天和大家一起分享一下数据库相关的知识。<br>&#160;&#160;&#160;&#160;最近，学习了一下SQL的常用增删改查语句，但大多是直接在navicat上直接进行，没有把实际的操作转移到Unity中，那么今天就详细的给大家讲讲，怎么在Unity中操作数据库。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>如果想在Unity中连接MySQL数据库，需要大家提前做好准备</p><ul><li>mysql.data.dll 数据库连接类（点击<a href="mysql.data.dll"> <strong>此处</strong></a>下载)</li><li><p>调整Unity工程的发布设置中Player Settings里的参数</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170117133403.jpg" alt=""></p><p>将API Compatibility Level调整为 .Net 2.0</p><a id="more"></a></li><li><p>数据库SQL文件（点击<a href="mydb.sql"> <strong>此处</strong> </a>下载SQL文件）<br>在数据库中创建mydb数据库，并导入SQL文件。</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170118102838.jpg" alt=""></p></li></ul><h2 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h2><p>对于数据库的连接，需要使用到MySQLConnnection类，通过将数据库的基本信息组装成一个字符串，然后作为参数传递给这个类。为了测试方便，我直接写到Start函数内。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/************************</span></span><br><span class="line"><span class="comment"> 配置数据库的基本信息</span></span><br><span class="line"><span class="comment">**************************/</span></span><br><span class="line"><span class="comment">//数据库服务器IP</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> host = <span class="string">"192.168.1.114"</span>;</span><br><span class="line"><span class="comment">//数据库名称</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> database = <span class="string">"mydb"</span>;</span><br><span class="line"><span class="comment">//访问数据库的用户名</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> dbuser = <span class="string">"admin"</span>;</span><br><span class="line"><span class="comment">//访问数据库的密码</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> dbpwd = <span class="string">"123"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据库连接字符串</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">string</span> connectionString;</span><br><span class="line"><span class="comment">//数据库连接对象</span></span><br><span class="line"><span class="keyword">private</span> MySqlConnection dbConnection;</span><br><span class="line"><span class="comment">// Use this for initialization</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//创建数据库连接字符串(注意字母的大小写)</span></span><br><span class="line">        connectionString = <span class="keyword">string</span>.Format(<span class="string">"Server=&#123;0&#125;;Database=&#123;1&#125;;User ID=&#123;2&#125;;Password=&#123;3&#125;;"</span>, host, database, dbuser, dbpwd);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建数据库连接对象</span></span><br><span class="line">        dbConnection = <span class="keyword">new</span> MySqlConnection(connectionString);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//打开数据库</span></span><br><span class="line">        dbConnection.Open();</span><br><span class="line">        print(<span class="string">"打开数据库成功"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"连接数据库失败!"</span>+ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="运行Select查询语句"><a href="#运行Select查询语句" class="headerlink" title="运行Select查询语句"></a>运行Select查询语句</h2><p>这里我们定义一个方法RunSelect查询account表中所有的用户信息，具体代码如下:</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunSelect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个SQL命令对象</span></span><br><span class="line">    MySqlCommand mySqlCommand = <span class="keyword">new</span> MySqlCommand(<span class="string">"select * from account"</span>, dbConnection);</span><br><span class="line">    <span class="comment">//执行命令，并将数据读取到reader中</span></span><br><span class="line">    MySqlDataReader reader = mySqlCommand.ExecuteReader();</span><br><span class="line">    <span class="comment">//如果有查询结果</span></span><br><span class="line">    <span class="keyword">if</span> (reader.HasRows)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//读取字段名</span></span><br><span class="line">        print(<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;        &#123;1&#125;         &#123;2&#125;"</span>, reader.GetName(<span class="number">0</span>), reader.GetName(<span class="number">1</span>), reader.GetName(<span class="number">2</span>)));</span><br><span class="line">        <span class="comment">//开始读取记录</span></span><br><span class="line">        <span class="keyword">while</span> (reader.Read())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//读取字段值</span></span><br><span class="line">            print(<span class="keyword">string</span>.Format(<span class="string">"&#123;0&#125;        &#123;1&#125;         &#123;2&#125;"</span>, reader[<span class="string">"uid"</span>], reader[<span class="string">"uname"</span>], reader[<span class="string">"upwd"</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//关闭MySQLDataReader</span></span><br><span class="line">    reader.Close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出结果:</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170118104148.jpg" alt=""></p><h2 id="执行Insert语句"><a href="#执行Insert语句" class="headerlink" title="执行Insert语句"></a>执行Insert语句</h2><p>创建一个insert的SQL指令，并运行。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunInsert</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个SQL命令对象</span></span><br><span class="line">    MySqlCommand mySqlCommand = <span class="keyword">new</span> MySqlCommand(<span class="string">"insert into account(uname,upwd,unick) values('user1','123','用户1');"</span>, dbConnection);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//执行命令，并将数据读取到reader中</span></span><br><span class="line">        <span class="keyword">int</span> affectRows=mySqlCommand.ExecuteNonQuery();</span><br><span class="line">        print(<span class="string">"影响行数"</span> + affectRows);</span><br><span class="line">        print(<span class="string">"数据插入成功"</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"数据插入失败!"</span>+ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Unity客户端执行结果:</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170118105843.jpg" alt=""></p><p>接下来，再看一下数据库的变化,已经能够看到新添加的user1 记录。</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170118110444.jpg" alt=""></p><h2 id="执行Update语句"><a href="#执行Update语句" class="headerlink" title="执行Update语句"></a>执行Update语句</h2><p>Update语句的方式和Insert方式类似。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//创建一个SQL命令对象</span></span><br><span class="line">    MySqlCommand mySqlCommand = <span class="keyword">new</span> MySqlCommand(<span class="string">"update  account set unick='董丽' where uname='user1'"</span>, dbConnection);</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//执行命令，并将数据读取到reader中</span></span><br><span class="line">        <span class="keyword">int</span> affectRows = mySqlCommand.ExecuteNonQuery();</span><br><span class="line">        print(<span class="string">"影响行数"</span> + affectRows);</span><br><span class="line">        print(<span class="string">"数据更新成功！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        print(<span class="string">"数据更新失败!"</span>+ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据库的变化如下:</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170118110714.jpg" alt=""></p><h2 id="执行delete语句"><a href="#执行delete语句" class="headerlink" title="执行delete语句"></a>执行delete语句</h2><p>在此处将之前插入的user1记录，从表格中删除掉。</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RunDelete</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       <span class="comment">//创建一个SQL命令对象</span></span><br><span class="line">       MySqlCommand mySqlCommand = <span class="keyword">new</span> MySqlCommand(<span class="string">"delete  from account where uname='user1'"</span>, dbConnection);</span><br><span class="line">       <span class="keyword">try</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="comment">//执行命令，并将数据读取到reader中</span></span><br><span class="line">           <span class="keyword">int</span> affectRows = mySqlCommand.ExecuteNonQuery();</span><br><span class="line">           print(<span class="string">"影响行数"</span> + affectRows);</span><br><span class="line">           print(<span class="string">"数据删除成功!"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">       &#123;</span><br><span class="line">           print(<span class="string">"数据删除失败!"</span> + ex.Message);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>执行结果:</p><p><img src="/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170118111212.jpg" alt=""></p><h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p>点击<a href="mysql_op_demo.unitypackage"> <strong>此处</strong></a> 下载Unity工程文件</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于数据库的操作，基本上的思路是，连接数据库，打开，执行常用的SQL语句，只要能够掌握这些知识，足以应对基本的数据库访问操作。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好久没有更新博客了，今天和大家一起分享一下数据库相关的知识。&lt;br&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;最近，学习了一下SQL的常用增删改查语句，但大多是直接在navicat上直接进行，没有把实际的操作转移到Unity中，那么今天就详细的给大家讲讲，怎么在Unity中操作数据库。&lt;/p&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;p&gt;如果想在Unity中连接MySQL数据库，需要大家提前做好准备&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mysql.data.dll 数据库连接类（点击&lt;a href=&quot;mysql.data.dll&quot;&gt; &lt;strong&gt;此处&lt;/strong&gt;&lt;/a&gt;下载)&lt;/li&gt;
&lt;li&gt;&lt;p&gt;调整Unity工程的发布设置中Player Settings里的参数&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/01/17/database/00015_unity_mysql/unity_op_mysql/20170117133403.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;将API Compatibility Level调整为 .Net 2.0&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://www.felixwee.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="Unity" scheme="http://www.felixwee.com/tags/Unity/"/>
    
      <category term="MySQL" scheme="http://www.felixwee.com/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>NGUI图文聊天中的图文混排</title>
    <link href="http://www.felixwee.com/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/"/>
    <id>http://www.felixwee.com/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/</id>
    <published>2017-01-04T12:37:51.000Z</published>
    <updated>2018-02-05T18:48:59.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图文混排介绍"><a href="#图文混排介绍" class="headerlink" title="图文混排介绍"></a>图文混排介绍</h2><p>图文混排通常用于聊天模块，在文字中夹杂表情图片。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921085229.jpg" alt=""></p><h2 id="位图字体制作"><a href="#位图字体制作" class="headerlink" title="位图字体制作"></a>位图字体制作</h2><p>1）图文混排的制作，首先要制作位图字体。<br>首先得下载一个位图制作工具Bitmap font generator,可以点击<a href="./assets/bmfont_1.13.exe">这里</a>下载<br>2) 将要作为位图的文字写入到一个文本文件中，以UTF-8编码格式保存或在BMFont中进行选择。</p><a id="more"></a><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921090001.jpg" alt=""></p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921090153.jpg" alt=""></p><p>亮色的字是制作位图的文字。</p><p>3）通过Edit菜单，选择Select Chars form File选中之前创建好的文本文件，软件会自动将文本中要制作位图字体的字符选中。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921090349.jpg" alt=""></p><p>4）通过Options菜单中的【Font Settings】选中要使用的字体文件,点击OK即可。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921090644.jpg" alt=""></p><p>5）导出设置</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921091036.jpg" alt=""></p><p>通过Texture 中的Width和Height用于设置最终生成图片的宽和高，如果设定的大小无法容纳所有字体，则会创建多个文件,可以通过快捷键[V]对最终生成的位图字体进行预览。</p><p>File Format 中的Texture和Comporession可以设置导出的位图使用什么格式和压缩算法。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921094916.jpg" alt=""></p><p>6) 通过Options菜单中的【Save Bitmap For Font as…】<br>在弹出的弹窗中填入文件名称MyFont,保存成功后会看到下面的文件.</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921095309.jpg" alt=""></p><p>7)将制作好的字体导入到Unity中，使用Font Maker制作位图字体。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921105526.jpg" alt=""></p><p><b>注意: Output 中的Atlas 保证为None</b></p><p>点击 Create the font 保存制作好的字体.</p><h2 id="制作表情"><a href="#制作表情" class="headerlink" title="制作表情"></a>制作表情</h2><p>1.将准备好的表情图只作为图集emoji，表情图点击<a href="./assets/emoji.zip">这里</a>下载.</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921110109.jpg" alt=""></p><p>2.重新打开Font Maker 在 Output下的图集中，选择制作好的表情图集emoji,再次点击Create the font 按钮，保存最终的字体为MyEmojiFont。</p><p>3.选中MyEmojiFont预制体，在UI Font下的【Symbols and Emotiicons】添加表情。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921110424.jpg" alt=""></p><p>左侧输入对应字符，中间选择对应的图片，填写完成后，点击Add进行表情添加。</p><h2 id="位图字体使用及图文混排"><a href="#位图字体使用及图文混排" class="headerlink" title="位图字体使用及图文混排"></a>位图字体使用及图文混排</h2><p>1)新建UILabel,并将字体选择为刚刚制作好的MyEmojiFont字体。</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921111353.jpg" alt=""></p><p>具体展现的效果如下</p><p><img src="/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921111427.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图文混排介绍&quot;&gt;&lt;a href=&quot;#图文混排介绍&quot; class=&quot;headerlink&quot; title=&quot;图文混排介绍&quot;&gt;&lt;/a&gt;图文混排介绍&lt;/h2&gt;&lt;p&gt;图文混排通常用于聊天模块，在文字中夹杂表情图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2017/01/04/ngui/00014_ngui_twhp/TextEmotion/20160921085229.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;位图字体制作&quot;&gt;&lt;a href=&quot;#位图字体制作&quot; class=&quot;headerlink&quot; title=&quot;位图字体制作&quot;&gt;&lt;/a&gt;位图字体制作&lt;/h2&gt;&lt;p&gt;1）图文混排的制作，首先要制作位图字体。&lt;br&gt;首先得下载一个位图制作工具Bitmap font generator,可以点击&lt;a href=&quot;./assets/bmfont_1.13.exe&quot;&gt;这里&lt;/a&gt;下载&lt;br&gt;2) 将要作为位图的文字写入到一个文本文件中，以UTF-8编码格式保存或在BMFont中进行选择。&lt;/p&gt;
    
    </summary>
    
      <category term="NGUI" scheme="http://www.felixwee.com/categories/NGUI/"/>
    
    
      <category term="NGUI" scheme="http://www.felixwee.com/tags/NGUI/"/>
    
      <category term="图文混排" scheme="http://www.felixwee.com/tags/%E5%9B%BE%E6%96%87%E6%B7%B7%E6%8E%92/"/>
    
      <category term="聊天表情" scheme="http://www.felixwee.com/tags/%E8%81%8A%E5%A4%A9%E8%A1%A8%E6%83%85/"/>
    
      <category term="聊天" scheme="http://www.felixwee.com/tags/%E8%81%8A%E5%A4%A9/"/>
    
  </entry>
  
  <entry>
    <title>NGUI中实现简单拖放</title>
    <link href="http://www.felixwee.com/2017/01/04/ngui/ngui_dragdrop/ngui_dragdop/"/>
    <id>http://www.felixwee.com/2017/01/04/ngui/ngui_dragdrop/ngui_dragdop/</id>
    <published>2017-01-04T12:37:51.000Z</published>
    <updated>2018-03-21T17:20:33.239Z</updated>
    
    <content type="html"><![CDATA[<h2 id="拖动的实现"><a href="#拖动的实现" class="headerlink" title="拖动的实现"></a>拖动的实现</h2><p>如果实现一个UI的可以拖动，只要在需要拖动的UI元素上添加上BoxCollider和UIDragAndDopItem便可以实现拖动。</p><h2 id="如果处理拖动和释放"><a href="#如果处理拖动和释放" class="headerlink" title="如果处理拖动和释放"></a>如果处理拖动和释放</h2><p>如果对拖动过程进行操作，那我们就需要新建类，并集成UIDragDropItem类，在新类中通过重写相应的方法来实现。</p><p>在我们拖动过程中到底发生了什么事情，有哪些方法被调用了呢？</p><p>下面是拖动过程中调用的方法，按实际顺序排列(标红项重要)</p><ul><li>OnPress(bool isPressed) 拖动对象是否被按下，按下为true,松开为false</li><li><font color="#ff0000">OnDragDropStart 拖动释放开始</font></li><li>StartDraging 拖动开始</li><li>OnDragStart()  开始拖动</li><li><font color="#ff0000">OnDragDropMove(Vector2 delta) 拖动释放操作移动</font></li><li>OnDrag(Vector2 delta)  拖动中</li><li>OnDragDropEnd() 拖动释放结束</li><li><font color="#ff0000">OnDragDropRelease(GameObject surface) 拖动物体被释放 </font></li><li>OnDragEnd()  拖动结束</li><li>OnPress(bool isPress)<a id="more"></a></li></ul><p>OnDragDropRelease(GameObject surface)<br>使用此方法可以对鼠标松开那一刻进行处理</p><h2 id="拖动案例一"><a href="#拖动案例一" class="headerlink" title="拖动案例一"></a>拖动案例一</h2><p>松开鼠标时，如果松开是，与影子重合，及设置花与影子在同一位置，此时shadow和flower都有BoxCollider,flower有MyDragItem（代码如下)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyDragItem</span> : <span class="title">UIDragDropItem</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnDragDropRelease</span>(<span class="params">GameObject surface</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">base</span>.OnDragDropRelease(surface);</span><br><span class="line">        <span class="comment">//如果释放拖拽物体下面UI有碰撞体，并且名称为shadow,则将拖动的物体与shadow位置设为一样</span></span><br><span class="line">        <span class="keyword">if</span> (surface!=<span class="literal">null</span> &amp;&amp; surface.name==<span class="string">"shadow"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.transform.localPosition = surface.transform.localPosition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拖动案例二"><a href="#拖动案例二" class="headerlink" title="拖动案例二"></a>拖动案例二</h2><p>在上一个案例的基础上，为shadow添加DragDropContainer组件，花添加DragDropItem组件，花会自动进入到Shadow游戏对象中去（可以不用编写任何代码）</p><p><img src="/2017/01/04/ngui/ngui_dragdrop/ngui_dragdop/2016092006345.bmp" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;拖动的实现&quot;&gt;&lt;a href=&quot;#拖动的实现&quot; class=&quot;headerlink&quot; title=&quot;拖动的实现&quot;&gt;&lt;/a&gt;拖动的实现&lt;/h2&gt;&lt;p&gt;如果实现一个UI的可以拖动，只要在需要拖动的UI元素上添加上BoxCollider和UIDragAndDopItem便可以实现拖动。&lt;/p&gt;
&lt;h2 id=&quot;如果处理拖动和释放&quot;&gt;&lt;a href=&quot;#如果处理拖动和释放&quot; class=&quot;headerlink&quot; title=&quot;如果处理拖动和释放&quot;&gt;&lt;/a&gt;如果处理拖动和释放&lt;/h2&gt;&lt;p&gt;如果对拖动过程进行操作，那我们就需要新建类，并集成UIDragDropItem类，在新类中通过重写相应的方法来实现。&lt;/p&gt;
&lt;p&gt;在我们拖动过程中到底发生了什么事情，有哪些方法被调用了呢？&lt;/p&gt;
&lt;p&gt;下面是拖动过程中调用的方法，按实际顺序排列(标红项重要)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OnPress(bool isPressed) 拖动对象是否被按下，按下为true,松开为false&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;#ff0000&quot;&gt;OnDragDropStart 拖动释放开始&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;StartDraging 拖动开始&lt;/li&gt;
&lt;li&gt;OnDragStart()  开始拖动&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;#ff0000&quot;&gt;OnDragDropMove(Vector2 delta) 拖动释放操作移动&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;OnDrag(Vector2 delta)  拖动中&lt;/li&gt;
&lt;li&gt;OnDragDropEnd() 拖动释放结束&lt;/li&gt;
&lt;li&gt;&lt;font color=&quot;#ff0000&quot;&gt;OnDragDropRelease(GameObject surface) 拖动物体被释放 &lt;/font&gt;&lt;/li&gt;
&lt;li&gt;OnDragEnd()  拖动结束&lt;/li&gt;
&lt;li&gt;OnPress(bool isPress)&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="NGUI" scheme="http://www.felixwee.com/categories/NGUI/"/>
    
    
      <category term="NGUI" scheme="http://www.felixwee.com/tags/NGUI/"/>
    
      <category term="拖拽" scheme="http://www.felixwee.com/tags/%E6%8B%96%E6%8B%BD/"/>
    
      <category term="拖动" scheme="http://www.felixwee.com/tags/%E6%8B%96%E5%8A%A8/"/>
    
      <category term="Drag" scheme="http://www.felixwee.com/tags/Drag/"/>
    
      <category term="Drop" scheme="http://www.felixwee.com/tags/Drop/"/>
    
  </entry>
  
  <entry>
    <title>如何在HTC Vive中创建UI界面</title>
    <link href="http://www.felixwee.com/2016/11/03/vr/00011_vr_ui_ugui/htc_vive_ui/"/>
    <id>http://www.felixwee.com/2016/11/03/vr/00011_vr_ui_ugui/htc_vive_ui/</id>
    <published>2016-11-03T05:00:00.000Z</published>
    <updated>2019-01-02T06:08:57.616Z</updated>
    
    <content type="html"><![CDATA[<p>无论是游戏，还是虚拟现实等，都不可能缺少UI界面的制作，对于界面我们可以分为两种UI界面，一种是能够跟随VR头盔移动的UI,另一种为不跟随头盔移动的UI,也就是将UI看作三给空间中的游戏对象。下面将带领大家通过UGUI来制作界面.</p><p>UGUI的Canvas画布的RenderMode具有三种模式:</p><p><img src="/2016/11/03/vr/00011_vr_ui_ugui/htc_vive_ui/20161101215551.jpg" alt=""></p><a id="more"></a><ul><li><p>Screen Space – overlay<br>此模式不需要UI摄像机，UI将永远出现在所有摄像机的最前面,如果我想在UI前面显显示一个模型或游戏对象就不行了，VR的界面不能采用些种方式。</p></li><li><p>Screen Space- Camera<br>此模式是我决定采取的，它需要提供一个Camera用于渲染UI界面，这种方法和NGUI的原理有些像，这种形式我可以在UI界面与摄像机中间放置一些游戏对象，可以通过设定渲染摄像机，使UI跟随头盔进行移动。</p></li><li><p>World Space<br>这个就是完全3D的UI，整个Canvas画布被认定为是一个3D空间中的游戏对象，与创建的Cube或其它预设游戏对象一样,此模式用于创建不跟随头盔移动的UI界面。</p></li></ul><h2 id="UI界面的制作"><a href="#UI界面的制作" class="headerlink" title="UI界面的制作"></a>UI界面的制作</h2><h3 id="跟随头盔移动的UI界面"><a href="#跟随头盔移动的UI界面" class="headerlink" title="跟随头盔移动的UI界面"></a>跟随头盔移动的UI界面</h3><p>若要实现此模式，需要将Canvas的Render Mode选择为ScreenSpace-Camera。</p><p><img src="/2016/11/03/vr/00011_vr_ui_ugui/htc_vive_ui/20161101222310.jpg" alt=""></p><p>设置后，摄像机的效果如下图:</p><p><img src="/2016/11/03/vr/00011_vr_ui_ugui/htc_vive_ui/20161101222617.jpg" alt=""></p><p>当我们移动头盔时，由于UI是由头盔的摄像头渲染的，所以会跟随头盔移动。</p><h3 id="不跟随头盔移动的UI界面"><a href="#不跟随头盔移动的UI界面" class="headerlink" title="不跟随头盔移动的UI界面"></a>不跟随头盔移动的UI界面</h3><p>若要实现此模式，需要将Canvas的Render Mode选择为World Space。<br>我们只需要将Canvas中的调整为合适大小，和其它游戏对象一样，调整合适位置即可。</p><h2 id="UI的交互方式"><a href="#UI的交互方式" class="headerlink" title="UI的交互方式"></a>UI的交互方式</h2><p>UI的交互方式，需要通过射线与碰撞器的结合来实现，整个实现的思路类似于NGUI元素的碰撞检测。<br>通过手柄发出射线，当射线碰撞到UI元素后，添加上相同大小的碰撞器，再结合手柄的Trigger键来决定相应的操作。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">SteamVR_Controller.Device device;</span><br><span class="line">Linerender line;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  SteamVR_TrackedObject trackObj=<span class="keyword">this</span>.GetComponent&lt;SteamVR_TrackedObject&gt;();</span><br><span class="line">  device=SteamVR_Controller.Input((<span class="keyword">int</span>)trackObj.index);</span><br><span class="line">  line=<span class="keyword">this</span>.AddComponent&lt;Linerender&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过Linerender绘制射线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="comment">//创建Ray</span></span><br><span class="line">   Ray ray=<span class="keyword">new</span> Ray(<span class="keyword">this</span>.transform.position,<span class="keyword">this</span>.transform.forward.normalized*<span class="number">1000</span>);</span><br><span class="line">   <span class="comment">//设定线顶点数</span></span><br><span class="line">   line.SetVertextCount(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//按下扳机键发出射线，在通过射线所碰撞的UI名称来区分按钮(每个按钮都需要添加Collider)</span></span><br><span class="line"><span class="keyword">if</span>(device.GetPressDown(SteamVR_Controller.ButtonMask.Trigger)&#123;</span><br><span class="line">RaycastHit hitInfo;</span><br><span class="line"><span class="keyword">if</span>(Physic.Raycast(ray,<span class="keyword">out</span> hitInfo))&#123;</span><br><span class="line">   <span class="comment">//在此处处理</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是游戏，还是虚拟现实等，都不可能缺少UI界面的制作，对于界面我们可以分为两种UI界面，一种是能够跟随VR头盔移动的UI,另一种为不跟随头盔移动的UI,也就是将UI看作三给空间中的游戏对象。下面将带领大家通过UGUI来制作界面.&lt;/p&gt;
&lt;p&gt;UGUI的Canvas画布的RenderMode具有三种模式:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2016/11/03/vr/00011_vr_ui_ugui/htc_vive_ui/20161101215551.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VR" scheme="http://www.felixwee.com/categories/VR/"/>
    
    
      <category term="NGUI" scheme="http://www.felixwee.com/tags/NGUI/"/>
    
      <category term="UGUI" scheme="http://www.felixwee.com/tags/UGUI/"/>
    
      <category term="VR" scheme="http://www.felixwee.com/tags/VR/"/>
    
      <category term="VR UI" scheme="http://www.felixwee.com/tags/VR-UI/"/>
    
  </entry>
  
  <entry>
    <title>虚拟现实设备介绍</title>
    <link href="http://www.felixwee.com/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/"/>
    <id>http://www.felixwee.com/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/</id>
    <published>2016-11-02T16:00:00.000Z</published>
    <updated>2018-02-05T18:48:59.350Z</updated>
    
    <content type="html"><![CDATA[<p>随着虚拟现实在其他行业越来越深入的应用与推广，虚拟现实VR必将受到大众亲睐。那么，如果针对那些专业人士或者搞机党，现实里的三大VR巨头，到底谁的产品更值呢？</p><p>接下来我们主要来聊聊三大桌面虚拟现实平台的差异及竞争力，分别是Oculus Rift、HTC Vive以及索尼PlayStation VR。这三款产品不论是硬件性能、平台规模还是资源，都拥有极高的水准。当然，它们各自的使用条件、未来发展前景也不完全相同，如果你想在第一时间体验虚拟现实的魅力，不妨先了解一下哪一款才是最适合你的。</p><a id="more"></a><p>三款虚拟现实头戴也都集成了头部运动追踪、位置追踪系统，其中Oculus Rift和索尼PlayStation VR使用动作感应摄像头来识别用户运动，需要将摄像头放置在用户正前方；而HTC Vive则另辟蹊径，头戴上集成多达37个LED传感器，能够与安装在房间中的两个传感器构成一个动作捕捉空间，从理论上能够更精准地识别用户微小的动作。</p><p>由于三款虚拟现实头戴均是桌面级的产品，所以硬件设计上比较相似，只存在微小的差异。比如，Oculus Rift和HTC Vive均配备了单眼分辨率1080<em>1200像素的OLED显示屏、视角110度、刷新率90Hz，只不过Oculus Rift的屏幕比例为16:9、HTC Vive则为9:5。相对来说，索尼PlayStation VR的屏幕分辨率略低，为960</em>1080像素、视野率则是100度，但刷新率高达120Hz。</p><h2 id="1-Oculus-Rift"><a href="#1-Oculus-Rift" class="headerlink" title="1.Oculus Rift"></a>1.Oculus Rift</h2><p>虚拟现实领域最出名的品牌之一，Oculus拥有VR领域最令人印象深刻的技术团队，而且背后还有Facebook雄厚的财力支持。<br>而且Oculus头盔对PC主机的要求极高，现实中只有极少数土豪能满足这些配置。如果Rift真的相当“吃硬件”的话，那么对它持负面反应的人数有可能显著上升。另外一个老生常谈的问题就是，它的价格令很多人望而却步。</p><p>硬件设备:</p><ul><li>头戴显示器HMD</li><li>精英手柄</li><li>传感器</li><li>媒体遥控器</li><li>Oculus Touch(单独买)</li></ul><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/20161025225232.png" alt=""></p><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/00301490163_4f8ccee7.jpg" alt=""></p><h3 id="2-索尼-PS-VR"><a href="#2-索尼-PS-VR" class="headerlink" title="2.索尼 PS VR"></a>2.索尼 PS VR</h3><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/20161025172222.jpg" alt=""></p><p>配合索尼PlayStation 4游戏机使用的VR设备，虽然是三大桌面级VR眼镜中最便宜的一款，但也因此是科技含量最低的一款，利用不同颜色的灯光和摄像头配合定位，但有着硬件统一的优势，体验上并不会输给高性能PC驱动下的Vive和Rift。</p><p>硬件设备:</p><ul><li>头戴显示器HMD</li><li>PlayStation摄像头</li><li>PlayStation MoveX2</li></ul><h2 id="3-HTC-Vive"><a href="#3-HTC-Vive" class="headerlink" title="3.HTC Vive"></a>3.HTC Vive</h2><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_85d1e1ae59c15ddb9f9e0218618796a7.jpg" alt=""></p><p>HTC Vive 是智能手机制造商 HTC 和游戏巨头 Valve 合作开发的一款虚拟现实头戴显示器，它和 Oculus Rift 一样以 PC 计算机为基础平台。考虑到 Valve 在游戏领域的地位，因此 HTC Vive 在游戏资源方面会比 Oculus Rift 要丰富一些。<br>这款头戴设备内部配置有陀螺仪、加速度和激光定位等传感器，能够准确追踪用户在游戏地图中动作，并提供身临其境的游戏体验。除了游戏之外，HTC 还打算将 HTC Vive 用于非游戏领域，比如视频等。</p><p>硬件设备:</p><ul><li>头戴显示器HMD</li><li>HtC Vive控制器x2</li><li>定位基站x2</li></ul><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/53031.png" alt=""></p><h2 id="各种设备定位技术"><a href="#各种设备定位技术" class="headerlink" title="各种设备定位技术"></a>各种设备定位技术</h2><p>HTC vive所用的Lighthouse技术属于激光定位技术，Oculus Rift以及索尼PlayStation VR所用的定位技术都属于光学定位技术，其中Oculus Rift是红外主动式光学技术，索尼PlayStation VR则是可见光主动式光学技术</p><h3 id="HTC-Vive定位方式"><a href="#HTC-Vive定位方式" class="headerlink" title="HTC Vive定位方式"></a>HTC Vive定位方式</h3><p>HTC的Lighthouse室内定位技术属于激光扫描定位技术，靠激光和光敏传感器来确定运动物体的位置。两个激光发射器被安置在对角，形成大小可调的长方形区域。激光束由发射器里面的两排固定LED灯发出，每秒6次。每个激光发射器内有两个扫描模块，分别在水平和垂直方向轮流对定位空间发射激光扫描定位空间。<br>　　HTC Vive头显和手柄上有超过70个光敏传感器。通过计算接收激光的时间来计算传感器位置相对于激光发射器的准确位置，通过多个光敏传感器可以探测出头显的位置及方向。这里需要说明一下，HTC Vive采用的激光定位技术，定位过程中光敏传感器的ID会随着它接收到的数据同时传给计算单元的，也就是说计算单元是可以直接区分不同的光敏传感器，从而根据每个光敏传感器所固定在头显和手柄上的位置以及其他信息一起最终构建头显及手柄的三维模型。</p><h3 id="Oculus-Rift-定位方式"><a href="#Oculus-Rift-定位方式" class="headerlink" title="Oculus Rift 定位方式"></a>Oculus Rift 定位方式</h3><p>Oculus Rift设备上会隐藏着一些 红外灯（即为标记点），这些红外灯可以向外发射红外光，并用两台红外摄像机实时拍摄。所谓的红外摄像机就是在摄像机外加装红外光滤波片，这样摄像机只能拍摄到头显以及手柄（Oculus touch）上红外灯，从而过滤掉头显及手柄周围环境的可见光信号， 提高了获得图像的信噪比，增加了系统的鲁棒性。<br>获得红外图像后，将两台摄像机从不同角度采集到的图像传输到计算单元中，再通过视觉算法过滤掉无用的信息，从而获得红外灯的位置。<br>再利用PnP算法，即利用四个不共面的红外灯在设备上的位置信息、四个点获得的图像信息即可最终将设备纳入摄像头坐标系，拟合出设备的三维模型，并以此来实时监控玩家的头部、手部运动。</p><h3 id="PSVR定位方式"><a href="#PSVR定位方式" class="headerlink" title="PSVR定位方式"></a>PSVR定位方式</h3><p>采用的是可见光主动式光学定位技术。<br>PlayStation VR设备采用体感摄像头和类似之前PS Move的彩色发光物体追踪，去定位人头部和控制器的位置。头显和手柄上会放LED灯球，每个手柄、头显上各装配一个。这些LED光球可以自行发光，且不同光球所发的光颜色不同，这样在摄像头拍摄时，光球与背景环境、各个光球之间都可以很好的区分。PS3原本采用单个摄像头，通过计算光球在图片中的半径来推算光球相对于摄像头的位置，并最终确定手柄和头显的位置。但是，单个摄像头定位的精度不高，鲁棒性不强，有时会把环境中的彩色物体识别成手柄，有时阳光比较强烈的时候还会不起作用。因此PS4采用了体感摄像头，即双目摄像头，利用两个摄像头拍摄到的图片计算光球的空间三维坐标。</p><h2 id="移动端VR设备"><a href="#移动端VR设备" class="headerlink" title="移动端VR设备"></a>移动端VR设备</h2><h3 id="1-三星Gear-VR"><a href="#1-三星Gear-VR" class="headerlink" title="1.三星Gear VR"></a>1.三星Gear VR</h3><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/14561408_182906678785071_8491669128996716544_n.jpg" alt=""></p><p>三星和虚拟现实厂商 Oculus 联合推出的基于智能手机的虚拟现实头戴设备 Gear VR 进一步降低了虚拟现实技术的门槛，但同时其也带来了一系列新的挑战，因为它只能支持三星的智能手机。不过，这款设备在游戏、影音等方面的资源还是非常丰富的，其市场售价也不贵，大概在 200 美元左右。</p><h3 id="2-大朋——大朋VR一体机（移动级）、头盔（桌面级）"><a href="#2-大朋——大朋VR一体机（移动级）、头盔（桌面级）" class="headerlink" title="2.大朋——大朋VR一体机（移动级）、头盔（桌面级）"></a>2.大朋——大朋VR一体机（移动级）、头盔（桌面级）</h3><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_9859ca1e5cd4ef03493cd075e872adb5.jpg" alt=""></p><p>大朋作为国内较早进入VR领域的厂商之一，一直以来都有着不错的知名度，不过一体机由于无法轻易升级，并且价格昂贵，很难成为市场的主流，因此也并没有取得很好的成绩。相比之下，桌面级的大朋VR头盔价格较低，并且兼容Oculus之类的桌面VR设备，更有实用价值</p><h2 id="3-谷歌纸板眼镜"><a href="#3-谷歌纸板眼镜" class="headerlink" title="3.谷歌纸板眼镜"></a>3.谷歌纸板眼镜</h2><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/Img419153221.png" alt=""></p><p>就在各个虚拟现实眼镜生产商各种比拼性能的时候，谷歌却推出了一个廉价到极点的纸板眼镜，即使更新到了第二代，它仍旧是一个用硬纸板做成的虚拟现实眼镜。<br>从纯技术的角度上讲，这款纸板眼镜没有精致的摄像头，没有位置追踪器，甚至连头带都没有。我们有的只是一个更大、更厚的纸板来承担一部六英寸的大尺寸智能手机。</p><h3 id="4-暴风科技——暴风魔镜（移动级）"><a href="#4-暴风科技——暴风魔镜（移动级）" class="headerlink" title="4.暴风科技——暴风魔镜（移动级）"></a>4.暴风科技——暴风魔镜（移动级）</h3><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_0952d82706d3fb306ee10b96e9a03625.jpg" alt=""></p><p>短短数月，暴风魔镜更新了5代产品，但始终还是配合手机使用的移动级VR设备，而无论硬件上如何改进，内容上还是没有运用上自己在影视方面的优势，实用价值一般。</p><h2 id="乐视——超级头盔（移动级）、LeVR-Pro-1（移动级）"><a href="#乐视——超级头盔（移动级）、LeVR-Pro-1（移动级）" class="headerlink" title="乐视——超级头盔（移动级）、LeVR Pro 1（移动级）"></a>乐视——超级头盔（移动级）、LeVR Pro 1（移动级）</h2><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_b553aeb35f0fc3be211d9044833eb743.jpg" alt=""><br><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_a0748d7dd6f7952736289d2cc6b6a04b.jpg" alt=""></p><p>乐视的两款设备都是配合手机使用的盒子，在造型上，乐视做出了市面上大多数厂商都没有做到的精致感，但目前内容上还十分缺乏，这也是国产VR眼镜的通病。</p><h2 id="华为——华为VR（移动级）"><a href="#华为——华为VR（移动级）" class="headerlink" title="华为——华为VR（移动级）"></a>华为——华为VR（移动级）</h2><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_6a84a8f3d5739de2fd66d977dcbaab58.jpg" alt=""></p><p>自从DayDream提出之后，各大手机厂商纷纷愿意做出自家手机独占的VR设备，华为VR也不例外。目前这款华为VR还未上市，但从华为在硬件方面的积累上看，至少硬件上是不会让人失望的，而软件能够做到什么地步，才是真正考验这些手机大厂是时候。</p><h2 id="小米——小米VR玩具版（移动级）"><a href="#小米——小米VR玩具版（移动级）" class="headerlink" title="小米——小米VR玩具版（移动级）"></a>小米——小米VR玩具版（移动级）</h2><p><img src="/2016/11/03/vr/00011_vr_device_intro/vrdevice_intro/ertong_772454669b8a82104b4a55a898adcc22.jpg" alt=""></p><p>小米VR吊起了大家的胃口很长时间，但随后发布了一款实用锦纶和拉链制作的高端“盒子”让人大跌眼镜，当然我们更愿意相信这是一个开始，所以才有自嘲的“玩具版”字样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着虚拟现实在其他行业越来越深入的应用与推广，虚拟现实VR必将受到大众亲睐。那么，如果针对那些专业人士或者搞机党，现实里的三大VR巨头，到底谁的产品更值呢？&lt;/p&gt;
&lt;p&gt;接下来我们主要来聊聊三大桌面虚拟现实平台的差异及竞争力，分别是Oculus Rift、HTC Vive以及索尼PlayStation VR。这三款产品不论是硬件性能、平台规模还是资源，都拥有极高的水准。当然，它们各自的使用条件、未来发展前景也不完全相同，如果你想在第一时间体验虚拟现实的魅力，不妨先了解一下哪一款才是最适合你的。&lt;/p&gt;
    
    </summary>
    
      <category term="VR" scheme="http://www.felixwee.com/categories/VR/"/>
    
    
      <category term="HTC Vive" scheme="http://www.felixwee.com/tags/HTC-Vive/"/>
    
      <category term="Oculus" scheme="http://www.felixwee.com/tags/Oculus/"/>
    
      <category term="PlayStation VR" scheme="http://www.felixwee.com/tags/PlayStation-VR/"/>
    
  </entry>
  
  <entry>
    <title>HTC Vive虚拟现实设备手柄交互教程</title>
    <link href="http://www.felixwee.com/2016/11/01/vr/00013_htcvive_controller_dev/htcvive_controller_dev/"/>
    <id>http://www.felixwee.com/2016/11/01/vr/00013_htcvive_controller_dev/htcvive_controller_dev/</id>
    <published>2016-11-01T10:20:00.000Z</published>
    <updated>2018-02-05T18:50:54.478Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>在使用Unity中针对HTC Vive设备进行开发，需要使用到Steam平台为我们提供的插件包 <a href="https://www.assetstore.unity3d.com/cn/#!/content/32647" target="_blank" rel="noopener">SteamVR Plugin.unitypackage</a>.</p><p>这个插件中已经封装了与HTC Vive硬件进行通信的相关类，也是我们在做HTC Vive开发过程中经常使用的类，下面讲带领大家一起来了解一下。</p><ul><li><p>SteamVR_TrackedObject<br>此类用于根据硬件设备，并为硬件设备分配相应的索引</p></li><li><p>SteamVR_Controller.Device<br>最重要的类，封装了跟踪设备的全部信息,例如手柄的各种交互相应勾动扳机等。</p></li><li><p>SteamVR_Controller.ButtonMask<br>手柄各按键的名称</p></li><li><p>SteamVR_Controller<br>此类通常使用静态方法Input根据设备索引值获取对应的设备(Device)对象</p></li></ul><a id="more"></a><h2 id="HTC-手柄按键介绍"><a href="#HTC-手柄按键介绍" class="headerlink" title="HTC 手柄按键介绍"></a>HTC 手柄按键介绍</h2><p>在学习手柄操作之前，我们先来了解一下手柄上的按钮到底有那些？</p><p><img src="/2016/11/01/vr/00013_htcvive_controller_dev/htcvive_controller_dev/htc_shoubing.png" alt=""></p><p>每个按钮的名称都已经在ButtonMask中定义好。</p><p><img src="/2016/11/01/vr/00013_htcvive_controller_dev/htcvive_controller_dev/20161020180033.png" alt=""></p><h2 id="手柄的交互编程"><a href="#手柄的交互编程" class="headerlink" title="手柄的交互编程"></a>手柄的交互编程</h2><p>想要操作手柄的前提是先要获取到设备唯一标识也就是设备的索引,然后通过这个索引来获取的设备,也就是Device对象,然后利用Device对象的相应函数进行交互。</p><h4 id="1-通过手柄游戏对象上的SteamVR-TrackedObject组件进行获取。"><a href="#1-通过手柄游戏对象上的SteamVR-TrackedObject组件进行获取。" class="headerlink" title="1.通过手柄游戏对象上的SteamVR_TrackedObject组件进行获取。"></a>1.通过手柄游戏对象上的SteamVR_TrackedObject组件进行获取。</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取跟踪对象</span></span><br><span class="line">SteamVR_TrackedObject trackObj = <span class="keyword">this</span>.GetComponent&lt;SteamVR_TrackedObject&gt;();</span><br><span class="line"><span class="comment">//输出设备Index</span></span><br><span class="line">print(trackObj.index);</span><br><span class="line"></span><br><span class="line">-----输出结果----</span><br><span class="line">Device1</span><br></pre></td></tr></table></figure><p>实际上在SteamVR_TrackedObject类枚举类型EIndex中，已经预先定义了16个设备索引。<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EIndex</span><br><span class="line">&#123;</span><br><span class="line">None = <span class="number">-1</span>,</span><br><span class="line">Hmd = (<span class="keyword">int</span>)OpenVR.k_unTrackedDeviceIndex_Hmd,</span><br><span class="line">Device1,</span><br><span class="line">Device2,</span><br><span class="line">Device3,</span><br><span class="line">Device4,</span><br><span class="line">Device5,</span><br><span class="line">Device6,</span><br><span class="line">Device7,</span><br><span class="line">Device8,</span><br><span class="line">Device9,</span><br><span class="line">Device10,</span><br><span class="line">Device11,</span><br><span class="line">Device12,</span><br><span class="line">Device13,</span><br><span class="line">Device14,</span><br><span class="line">Device15</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="2-通过找到的索引获取到Device对象。"><a href="#2-通过找到的索引获取到Device对象。" class="headerlink" title="2.通过找到的索引获取到Device对象。"></a>2.通过找到的索引获取到Device对象。</h4><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过设备索引获取到相应设备对象Device</span></span><br><span class="line">SteamVR_Controller.Device device= SteamVR_Controller.Input((<span class="keyword">int</span>)trackObj.index);</span><br></pre></td></tr></table></figure><h4 id="3-调用Device中相应函数，来捕获手柄的操作。"><a href="#3-调用Device中相应函数，来捕获手柄的操作。" class="headerlink" title="3.调用Device中相应函数，来捕获手柄的操作。"></a>3.调用Device中相应函数，来捕获手柄的操作。</h4><p>通过Device.GetPressDown / GetPressUp / GetPress/Device.GetTouchDown / GetTouchUp / GetTouch进行操作</p><p>（1）手柄按键(以Trigger键为参考，其它键不再罗列)</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按键被按下</span></span><br><span class="line"><span class="keyword">bool</span> triggerPressDown=device.GetPressDown(SteamVR_Controller.ButtonMask.Trigger);</span><br><span class="line"><span class="keyword">if</span>(triggerPressDown)&#123;</span><br><span class="line">  print(<span class="string">"扳机键Trigger被按下"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//按键被松开</span></span><br><span class="line"><span class="keyword">if</span>(device.GetPressUp(SteamVR_Controller.ButtonMask.Trigger))&#123;</span><br><span class="line">  print(<span class="string">"扳机键Trigger被松开"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//按键被按下并保持不松开</span></span><br><span class="line"><span class="keyword">if</span>(device.GetPress(SteamVR_Controller.ButtonMask.Trigger))&#123;</span><br><span class="line">  print(<span class="string">"扳机键Trigger被按下并保持"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>( 2 ) 触摸板<br>触摸板具有两种方式</p><ul><li>触摸圆盘时，通过当前的状态获取触摸量</li><li>直接通过GetAxis获取触摸值</li></ul><p>通过获取用户触摸操作<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取设备</span></span><br><span class="line"> SteamVR_Controller.Device device=SteamVR_Controller.Input((<span class="keyword">int</span>)GetComponent&lt;SteamVR_TrackedObject&gt;().index);</span><br><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="keyword">if</span>(device.GetTouchDown(SteamVR_Controller.ButtonMask.touchpad))&#123;</span><br><span class="line">   <span class="comment">//获取当前状态信息</span></span><br><span class="line">  VRControllerState_t curState=device.GetState();</span><br><span class="line">  <span class="comment">//当前状态信息中的轴输入值</span></span><br><span class="line">   print(curState.rAxis0.x+<span class="string">","</span>+curState.rAxis0.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法(比较偏底层)</span></span><br><span class="line">Vector2 v2=device.GetAxis(Valve.VR.EVRButtonId.k_EButton_Axis0);</span><br><span class="line"><span class="comment">//输出轴输入值，分为x轴和y轴</span></span><br><span class="line">print(v2);</span><br></pre></td></tr></table></figure></p><p>( 3 ) 手柄的震动<br>手柄的震动通过TriggerHapicPulse方法,参数可以理解为震动的强度，最大值为3000,超出3000将不会震动<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SteamVR_Controller.Device device=SteamVR_Controller.Input((<span class="keyword">int</span>)GetComponent&lt;SteamVR_TrackedObject&gt;().index);</span><br><span class="line">TriggerHapticPulse(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;预备知识&quot;&gt;&lt;a href=&quot;#预备知识&quot; class=&quot;headerlink&quot; title=&quot;预备知识&quot;&gt;&lt;/a&gt;预备知识&lt;/h2&gt;&lt;p&gt;在使用Unity中针对HTC Vive设备进行开发，需要使用到Steam平台为我们提供的插件包 &lt;a href=&quot;https://www.assetstore.unity3d.com/cn/#!/content/32647&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SteamVR Plugin.unitypackage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;这个插件中已经封装了与HTC Vive硬件进行通信的相关类，也是我们在做HTC Vive开发过程中经常使用的类，下面讲带领大家一起来了解一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SteamVR_TrackedObject&lt;br&gt;此类用于根据硬件设备，并为硬件设备分配相应的索引&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SteamVR_Controller.Device&lt;br&gt;最重要的类，封装了跟踪设备的全部信息,例如手柄的各种交互相应勾动扳机等。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SteamVR_Controller.ButtonMask&lt;br&gt;手柄各按键的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SteamVR_Controller&lt;br&gt;此类通常使用静态方法Input根据设备索引值获取对应的设备(Device)对象&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="VR" scheme="http://www.felixwee.com/categories/VR/"/>
    
    
      <category term="VR" scheme="http://www.felixwee.com/tags/VR/"/>
    
      <category term="虚拟现实" scheme="http://www.felixwee.com/tags/%E8%99%9A%E6%8B%9F%E7%8E%B0%E5%AE%9E/"/>
    
      <category term="HTC Vive" scheme="http://www.felixwee.com/tags/HTC-Vive/"/>
    
      <category term="HTC Vive 手柄" scheme="http://www.felixwee.com/tags/HTC-Vive-%E6%89%8B%E6%9F%84/"/>
    
      <category term="控制器" scheme="http://www.felixwee.com/tags/%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
    
      <category term="触摸盘" scheme="http://www.felixwee.com/tags/%E8%A7%A6%E6%91%B8%E7%9B%98/"/>
    
      <category term="交互" scheme="http://www.felixwee.com/tags/%E4%BA%A4%E4%BA%92/"/>
    
  </entry>
  
</feed>
